{"meta":{"exported_on":1439273383520,"version":"002"},"data":{"posts":[{"id":2,"uuid":"63cc6f3c-8729-43bb-8233-d936ac11f6ae","title":"Maak je website snel in alle landen met een Content Delivery Network (CDN)","slug":"maak-je-website-snel-in-alle-landen-met-een-content-delivery-network-cdn","markdown":"Waarom snel\n\nZo werkt een Content Delivery Network\n\nTwee soorten Content Delivery Networks\n##Push CDN\nMet een Push CDN moet je jouw bestanden uploaden naar het CDN. Dit wordt meestal gedaan door automatisch kopieën naar het CDN te laten maken of een cron job die eens in de zoveel tijd upload. Gebruik je een CMS als Wordpress dan zijn er plugins om het uploaden voor je te doen zoals W3 total cache.\n\nHet voordeel van een push CDN is dat al je content automatisch op het CDN staat. Dit is voornamelijk geschikt voor grotere websites, omdat de sitebezoeker niet hoeft te wachten totdat bestanden naar jouw CDN verplaatst zijn. Ook geeft het jou meer controle over welke bestanden op het CDN moeten staan.\n\nHet nadeel is dat je zelf het kopieerproces in moet stellen en ervoor moet zorgen dat het altijd werkt. Daarnaast kunnen er situaties ontstaan waarbij een foto is ge-update en je 10 minuten moet wachten voordat hij naar je CDN gekopieerd is. Dit komt omdat je het kopiëren dan 1x per 10 minuten doet. Gedurende die tijd krijgen je bezoekers een 404 file not found error (alleen voor het plaatje). Je hebt dus meer controle, maar moet ook meer moeite doen om het goed in te stellen.\n\nDeze methode wordt dan ook vaak door grotere websites gebruikt.\n\n##Pull CDN\nJe raadt het al, een pull CDN is precies het tegenovergestelde van een push CDN. Als een bezoeker een bestand (afbeelding, javascript, CSS) opvraagt en het is niet beschikbaar op het CDN, dan haalt het CDN dit bestand van jouw webserver. Vanaf dat moment staat het bestand gecached en al op het CDN. Het bestand blijft staan totdat het verlopen is. Standaard is dit vaak 24 uur, en wordt aangeduid met TTL (time to live).\n\nHet voordeel is dat een pull CDN 'set it and forget it' is. Zet hem aan en het werkt, geen ingewikkelde configuratie nodig.\n\nHet nadeel is dat je de flexibiliteit om te bepalen wát er op het CDN komt te staan verliest. Ook is de éérste bezoeker het haasje, de laadtijd is voor hem langer.\n\nVoor gevorderden\nMocht je browser caching hebben ingesteld op jouw server dan worden de expiry headers (bijv. 30 dagen) zoals jouw server ze meestuurt gebruikt. Een bestand kan dan dus veel langer op het CDN blijven staan en jouw server zal nog minder belast worden. Immers, in plaats van elke 24 uur het plaatje ophalen van jouw server gebeurd dit nu nog maar 1x per 30 dagen.","html":"<p>Waarom snel</p>\n\n<p>Zo werkt een Content Delivery Network</p>\n\n<p>Twee soorten Content Delivery Networks  </p>\n\n<h2 id=\"pushcdn\">Push CDN</h2>\n\n<p>Met een Push CDN moet je jouw bestanden uploaden naar het CDN. Dit wordt meestal gedaan door automatisch kopieën naar het CDN te laten maken of een cron job die eens in de zoveel tijd upload. Gebruik je een CMS als Wordpress dan zijn er plugins om het uploaden voor je te doen zoals W3 total cache.</p>\n\n<p>Het voordeel van een push CDN is dat al je content automatisch op het CDN staat. Dit is voornamelijk geschikt voor grotere websites, omdat de sitebezoeker niet hoeft te wachten totdat bestanden naar jouw CDN verplaatst zijn. Ook geeft het jou meer controle over welke bestanden op het CDN moeten staan.</p>\n\n<p>Het nadeel is dat je zelf het kopieerproces in moet stellen en ervoor moet zorgen dat het altijd werkt. Daarnaast kunnen er situaties ontstaan waarbij een foto is ge-update en je 10 minuten moet wachten voordat hij naar je CDN gekopieerd is. Dit komt omdat je het kopiëren dan 1x per 10 minuten doet. Gedurende die tijd krijgen je bezoekers een 404 file not found error (alleen voor het plaatje). Je hebt dus meer controle, maar moet ook meer moeite doen om het goed in te stellen.</p>\n\n<p>Deze methode wordt dan ook vaak door grotere websites gebruikt.</p>\n\n<h2 id=\"pullcdn\">Pull CDN</h2>\n\n<p>Je raadt het al, een pull CDN is precies het tegenovergestelde van een push CDN. Als een bezoeker een bestand (afbeelding, javascript, CSS) opvraagt en het is niet beschikbaar op het CDN, dan haalt het CDN dit bestand van jouw webserver. Vanaf dat moment staat het bestand gecached en al op het CDN. Het bestand blijft staan totdat het verlopen is. Standaard is dit vaak 24 uur, en wordt aangeduid met TTL (time to live).</p>\n\n<p>Het voordeel is dat een pull CDN 'set it and forget it' is. Zet hem aan en het werkt, geen ingewikkelde configuratie nodig.</p>\n\n<p>Het nadeel is dat je de flexibiliteit om te bepalen wát er op het CDN komt te staan verliest. Ook is de éérste bezoeker het haasje, de laadtijd is voor hem langer.</p>\n\n<p>Voor gevorderden <br />\nMocht je browser caching hebben ingesteld op jouw server dan worden de expiry headers (bijv. 30 dagen) zoals jouw server ze meestuurt gebruikt. Een bestand kan dan dus veel langer op het CDN blijven staan en jouw server zal nog minder belast worden. Immers, in plaats van elke 24 uur het plaatje ophalen van jouw server gebeurd dit nu nog maar 1x per 30 dagen.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1398887941247,"created_by":1,"updated_at":1398887941247,"updated_by":1,"published_at":1371985680000,"published_by":1},{"id":3,"uuid":"44af3720-346f-44cc-b80e-6007e1b1ccbe","title":"Magento 1.7 NGINX configuration","slug":"magento-1-7-nginx-configuration","markdown":"This config works for Magento version 1.7:\n\n```language-nginx\nserver {\n\t\tlisten       80 deferred;\n                server_name  example.com;\n\t\troot         /usr/share/nginx/magentofolder;\n\n\tlocation / {\n\t\t\tindex \t\t\t\t\tindex.html index.php; \t## Allow a static html file to be shown first\n        \ttry_files \t\t\t\t$uri $uri/ @handler; \t## If missing pass the URI to Magento's front handler    \t\t\n\t}\n\n\tlocation /admin/ {\n\t\tclient_body_timeout   \t\t3600;\n\t\tkeepalive_timeout     \t\t3600 3600;\n\t\tsend_timeout          \t\t3600;\n\t\tauth_basic           \"Restricted\"; ## Message shown in login window\n        auth_basic_user_file htpasswd; ## See /etc/nginx/htpassword\n        autoindex            on;\n\t}\n\n    ## These locations would be hidden by .htaccess normally\n\t\tlocation /app/                { deny all; }\n\t\tlocation /includes/           { deny all; }\n\t\tlocation /lib/                { deny all; }\n\t\tlocation /media/downloadable/ { deny all; }\n\t\tlocation /pkginfo/            { deny all; }\n\t\tlocation /report/config.xml   { deny all; }\n\t\tlocation /var/                { deny all; }\n\t\tlocation /lib/minify/         { allow all; }  ## Deny is applied after rewrites so must specifically allow minify\n\n    location /var/export/ { ## Allow admins only to view export folder\n        auth_basic           \"Restricted\"; ## Message shown in login window\n        auth_basic_user_file htpasswd; ## See /etc/nginx/htpassword\n        autoindex            on;\n    }\n\n        #### only use this if you use MAGMI\n\tlocation /magmi/ { \n        auth_basic           \"Restricted\"; ## Message shown in login window\n        auth_basic_user_file htpasswd; ## See /etc/nginx/htpassword\n        autoindex            on;\n    \t}\n\n    location @handler { ## Magento uses a common front handler\n        rewrite / /index.php;\n    }\n\n    location ~ .php/ { ## Forward paths like /js/index.php/x.js to relevant handler\n        rewrite ^(.*.php)/ $1 last;\n    }\n\n    location ~ .php$ { ## Execute PHP scripts\n\t\t# Zero-day exploit defense.\n\t\t# http://forum.nginx.org/read.php?2,88845,page=3\n\t\t# Won't work properly (404 error) if the file is not stored on this server, which is entirely possible with php-fpm/php-fcgi.\n\t\t# Comment the 'try_files' line out if you set up php-fpm/php-fcgi on another machine.  And then cross your fingers that you won't get hacked.\n\t\ttry_files \t\t$uri =404;\n        expires        off; ## Do not cache dynamic content\n        fastcgi_pass   phpcgi;\n        fastcgi_index  index.php;\n        #fastcgi_param  HTTPS $fastcgi_https;\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        fastcgi_param  MAGE_RUN_CODE default; ## Store code is defined in administration > Configuration > Manage Stores\t\t\n\t\tfastcgi_param  MAGE_RUN_TYPE store;\n        include        fastcgi_params; ## See /etc/nginx/fastcgi_param\n        fastcgi_param HTTPS on;  #otherwize Magento doesn't know it's https and you'll create a redirect loop\n}\n\n}\n \n\n \n\n \n\n \n\nvia Magento.","html":"<p>This config works for Magento version 1.7:</p>\n\n<p>```language-nginx\nserver { <br />\n        listen       80 deferred;\n                server_name  example.com;\n        root         /usr/share/nginx/magentofolder;</p>\n\n<pre><code>location / {\n        index                   index.html index.php;   ## Allow a static html file to be shown first\n        try_files               $uri $uri/ @handler;  ## If missing pass the URI to Magento's front handler           \n}\n\nlocation /admin/ {\n    client_body_timeout         3600;\n    keepalive_timeout           3600 3600;\n    send_timeout                3600;\n    auth_basic           \"Restricted\"; ## Message shown in login window\n    auth_basic_user_file htpasswd; ## See /etc/nginx/htpassword\n    autoindex            on;\n}\n\n## These locations would be hidden by .htaccess normally\n    location /app/                { deny all; }\n    location /includes/           { deny all; }\n    location /lib/                { deny all; }\n    location /media/downloadable/ { deny all; }\n    location /pkginfo/            { deny all; }\n    location /report/config.xml   { deny all; }\n    location /var/                { deny all; }\n    location /lib/minify/         { allow all; }  ## Deny is applied after rewrites so must specifically allow minify\n\nlocation /var/export/ { ## Allow admins only to view export folder\n    auth_basic           \"Restricted\"; ## Message shown in login window\n    auth_basic_user_file htpasswd; ## See /etc/nginx/htpassword\n    autoindex            on;\n}\n\n    #### only use this if you use MAGMI\nlocation /magmi/ { \n    auth_basic           \"Restricted\"; ## Message shown in login window\n    auth_basic_user_file htpasswd; ## See /etc/nginx/htpassword\n    autoindex            on;\n    }\n\nlocation @handler { ## Magento uses a common front handler\n    rewrite / /index.php;\n}\n\nlocation ~ .php/ { ## Forward paths like /js/index.php/x.js to relevant handler\n    rewrite ^(.*.php)/ $1 last;\n}\n\nlocation ~ .php$ { ## Execute PHP scripts\n    # Zero-day exploit defense.\n    # http://forum.nginx.org/read.php?2,88845,page=3\n    # Won't work properly (404 error) if the file is not stored on this server, which is entirely possible with php-fpm/php-fcgi.\n    # Comment the 'try_files' line out if you set up php-fpm/php-fcgi on another machine.  And then cross your fingers that you won't get hacked.\n    try_files       $uri =404;\n    expires        off; ## Do not cache dynamic content\n    fastcgi_pass   phpcgi;\n    fastcgi_index  index.php;\n    #fastcgi_param  HTTPS $fastcgi_https;\n    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n    fastcgi_param  MAGE_RUN_CODE default; ## Store code is defined in administration &gt; Configuration &gt; Manage Stores        \n    fastcgi_param  MAGE_RUN_TYPE store;\n    include        fastcgi_params; ## See /etc/nginx/fastcgi_param\n    fastcgi_param HTTPS on;  #otherwize Magento doesn't know it's https and you'll create a redirect loop\n</code></pre>\n\n<p>}</p>\n\n<p>}</p>\n\n<p>via Magento.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1398888211362,"created_by":1,"updated_at":1398888211362,"updated_by":1,"published_at":1349085600000,"published_by":1},{"id":4,"uuid":"af12c486-8181-4045-a4f7-e2aa5a9ddf15","title":"The Golden Master List of Magento Performance Enhancements","slug":"the-golden-master-list-of-magento-performance-enhancements","markdown":"There are lots of tips, tricks and hacks on how to enhance Magento. A lot of them are good. Some are entirely wrong! And most do not have each and every update you must make to every single one of your sites in order to get it to achieve the fastest possible load times. This is a list to remedy that situation.\n\nRemember, all of these updates only apply to production environments. Feel free to post comments, updates and suggestions and I will keep this list up to date as much as I possible can. Hopefully, in time we can achieve a golden master list of performance enhancements!\n\n<!--more-->\n\nLegend\n\nVerified, Tested &amp; Recommended for all installs\n\nVerified &amp; Tested. Recommendation varies based on application.\n\nMagento Configuration\n\nEnable Caching\n\nSystem &gt; Cache Management &gt; Select All &gt; Enable\n\nThis one is an absolute no-brainer and provides one of the best performance enhancements you will get in Magento. This caches the XML layer in Magento, along with some other information, to speed up PHP processing time.\n\nMerge JavaScript and CSS Files (Not needed if using Fooman Speedster module)\n\nSystem &gt; Configuration &gt; Advanced &gt; Developer &gt; Javascript Settings &amp; CSS Settings\n\nCombines the many css and js files defined in Magento's XML layer into one large file for each (one for js, one for css). It speeds up your site because it reduces the number of http connections needed in order to fetch this data through a web browser.\n\nCompilation\n\nSystem &gt; Tools &gt; Compilation &gt; Run Compilation Process\n\nThis option compiles all Magento installation files and creates a single include path. Remember to disable this module before upgrades. The compilation process may need to be ran again when new files are released. Recommended for high-volume websites or sites that are not often updated as it reduces PHP processing time and TTFB.\n\nDisable Logging\n\nSystem &gt; Configuration &gt; Advanced &gt; Developer &gt; Log Settings &gt; Enabled: No\n\nThis is disabled by default, but be sure to double-check it is disabled on production environments, as this setting can drastically slow down your website if enabled.\n\nEnable Gzip\n\nThis is a must-have tweak. It decreases page size by over 30%, and takes a base Magento home page PageSpeed from a 32 to a 69! Make sure to enable the deflate module in your Apache configuration, then comment out the appropriate lines in the mod_deflate.c directive of your ~/.htaccess file.\n\nMinify JavaScript\n\nInstall the Fooman Speedster module\n\nThe easiest way to minify your JavaScript is to install the Fooman Speedster module. This does everything you need to make sure all of your JavaScript is minified. It also merges your CSS and JavaScript files into one file each, so this replaces option #1 on this list.\n\nEnable Far-Future Expires\n\nAdd ExpiresActive On and the following lines after the ExpiresDefault directive in your ~/.htaccess file\n\nThese few lines add expires directives to your images and some other files. This tells the web browser to cache the contents for a period of time on these items, cutting down HTTP requests and load time for future visits. This is also a must-have and often overlooked tweak!!! These few lines took a Magento 1.6.1.0 site with a few of the above tweaks from a PageSpeed of a 70 to an 83! Also note, the default ExpiresDefault line should remain commented out to prevent long-term caching of dynamic PHP files.\n\n?\n\n1\n\n2\n\n3\n\n4\n\n&lt;FilesMatch \".(css|eot|flv|gif|htc|ico|jpg|jpeg|js|pdf|png|svg|swf|ttf|woff)$\"&gt;\n\nExpiresActive On\n\nExpiresDefault \"access plus 1 week\"\n\n&lt;/FilesMatch&gt;\n\nEnable Flat Catalog/Index\n\nSystem &gt; Index Management &gt; Enable All\n\nSystem &gt; Configuration &gt; Catalog &gt; Frontend, set Use Flat Catalog Category/Product to Yes\n\nIf you have a large amount of products on your site (&gt;10,000), this update decreases load times on searches, product listings, etc. I can't see this ever slowing down your site, even with only one product, so no reason to not tackle this easy one.\n\nServer Side\n\nInstall \"enough\" memory (2GB minimum)\n\nEven if you have very little traffic, ie. less than 100 visits per day, plan on running a minimum of 2GB of memory. Anything more, plan accordingly. Once you hit about 16GB RAM, you will be hitting peak efficiency, and are better off scaling horizontally rather than vertically (more server nodes VS. working with current resources).\n\nRun Lightspeed VS. Apache\n\nFor the most part, Lightspeed web server is a direct drop-in replacement for Apache. Virtual Host configurations stay the same, htaccess rules work, and just about everything else including modules and plugins work out of the box without any additional configuration. Lightspeed has a much lighter footprint than apache, as do many other web servers such as Nginx and Lighttpd, but Lightspeed involves little to no additional knowledge of server configurations or etc.\n\nInstall APC\n\nInstall APC with the command line pecl install apc\n\nAlso add the following cache handle to your app/etc/local.xml configuration file\n\n?\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n&lt;global&gt;\n\n...\n\n&lt;cache&gt;\n\n&lt;backend&gt;apc&lt;/backend&gt;\n\n&lt;prefix&gt;yourdomain_com_&lt;/prefix&gt;\n\n&lt;/cache&gt;\n\n...\n\n&lt;/global&gt;\n\nJust installing APC, with no configuration, whatsoever, decreased page load time by about 20% on my clean Magento install, and decreased TTFP by about 30%! APC is one of the best bytecode compressor's for PHP, and has been tried and true on many Magento installations so far, so there is no need to look elsewhere.\n\nEnable KeepAlive's\n\nAdd the following lines to your Apache configuration file\n \n<pre class=\"lang:apache decode:true \" >\nKeepAlive On\n\nKeepAliveTimeout 2\n</pre> \n\nApache KeepAlive keeps the TCP connection open between the client and the server, allowing multiple requests to be served over the same connection. This removes some overhead with sites serving up a lot of concurrent HTTP requests.\n\n \n<pre class=\"lang:apache decode:true \" >Disable open_basedir</pre> \n\n\nAdd the following line to your Apache configuration file\n\n \n<pre class=\"lang:apache decode:true \" >php_admin_value open_basedir none\n</pre> \n\nThe open_basedir parameter is a security feature that restricts filesystem lookups, but can hurt performance on applications with a large filesystem footprint like Magento. Disable it to lower lstat lookups. Find out more about this setting by reading this article by Nexcess.\n\nClient Side\n\nUse a CDN\n\nThis could fall under a Server Side upgrade, but the results are really drastic on the client side. A Content Delivery Network can improve your data cache, reduce latency, and increase redundancy for your web site. But the simple reason to use it is that it speeds up your website instantly. Ashley Schroder has a good article on integrating Magento with Amazon Cloudfront that makes it very simple to get up and running with a CDN, and Nexcess has a good article on setting up a CDN with Magento using their own CDN network.\n\nDatabase Related\n\nEnable the Query Cache\n\nAdd the following lines to your /etc/my.conf file\n\n \n<pre class=\"lang:default decode:true \" >query_cache_type=1\n\nquery_cache_size=64M</pre> \n\n\nThis caches a certain amount of MySQL statements so they do not need to be run again. Easy mod for a nice enhancement!\n\nRun MySQLTuner\n\n \n<pre class=\"lang:sh decode:true \" >wget http://mysqltuner.com/mysqltuner.pl\n\nperl mysqltuner.pl</pre> \n\n\nThis perl script monitors your current MySQL install and provides recommendations and suggestions for tweaks to your my.cnf file. Very informative stuff here!\n\nvia <a href=\"http://markshust.com/2012/02/13/golden-master-list-magento-performance-enhancements\">The Golden Master List of Magento Performance Enhancements | Mark Shust</a>.","html":"<p>There are lots of tips, tricks and hacks on how to enhance Magento. A lot of them are good. Some are entirely wrong! And most do not have each and every update you must make to every single one of your sites in order to get it to achieve the fastest possible load times. This is a list to remedy that situation.</p>\n\n<p>Remember, all of these updates only apply to production environments. Feel free to post comments, updates and suggestions and I will keep this list up to date as much as I possible can. Hopefully, in time we can achieve a golden master list of performance enhancements!</p>\n\n<!--more-->\n\n<p>Legend</p>\n\n<p>Verified, Tested &amp; Recommended for all installs</p>\n\n<p>Verified &amp; Tested. Recommendation varies based on application.</p>\n\n<p>Magento Configuration</p>\n\n<p>Enable Caching</p>\n\n<p>System &gt; Cache Management &gt; Select All &gt; Enable</p>\n\n<p>This one is an absolute no-brainer and provides one of the best performance enhancements you will get in Magento. This caches the XML layer in Magento, along with some other information, to speed up PHP processing time.</p>\n\n<p>Merge JavaScript and CSS Files (Not needed if using Fooman Speedster module)</p>\n\n<p>System &gt; Configuration &gt; Advanced &gt; Developer &gt; Javascript Settings &amp; CSS Settings</p>\n\n<p>Combines the many css and js files defined in Magento's XML layer into one large file for each (one for js, one for css). It speeds up your site because it reduces the number of http connections needed in order to fetch this data through a web browser.</p>\n\n<p>Compilation</p>\n\n<p>System &gt; Tools &gt; Compilation &gt; Run Compilation Process</p>\n\n<p>This option compiles all Magento installation files and creates a single include path. Remember to disable this module before upgrades. The compilation process may need to be ran again when new files are released. Recommended for high-volume websites or sites that are not often updated as it reduces PHP processing time and TTFB.</p>\n\n<p>Disable Logging</p>\n\n<p>System &gt; Configuration &gt; Advanced &gt; Developer &gt; Log Settings &gt; Enabled: No</p>\n\n<p>This is disabled by default, but be sure to double-check it is disabled on production environments, as this setting can drastically slow down your website if enabled.</p>\n\n<p>Enable Gzip</p>\n\n<p>This is a must-have tweak. It decreases page size by over 30%, and takes a base Magento home page PageSpeed from a 32 to a 69! Make sure to enable the deflate module in your Apache configuration, then comment out the appropriate lines in the mod_deflate.c directive of your ~/.htaccess file.</p>\n\n<p>Minify JavaScript</p>\n\n<p>Install the Fooman Speedster module</p>\n\n<p>The easiest way to minify your JavaScript is to install the Fooman Speedster module. This does everything you need to make sure all of your JavaScript is minified. It also merges your CSS and JavaScript files into one file each, so this replaces option #1 on this list.</p>\n\n<p>Enable Far-Future Expires</p>\n\n<p>Add ExpiresActive On and the following lines after the ExpiresDefault directive in your ~/.htaccess file</p>\n\n<p>These few lines add expires directives to your images and some other files. This tells the web browser to cache the contents for a period of time on these items, cutting down HTTP requests and load time for future visits. This is also a must-have and often overlooked tweak!!! These few lines took a Magento 1.6.1.0 site with a few of the above tweaks from a PageSpeed of a 70 to an 83! Also note, the default ExpiresDefault line should remain commented out to prevent long-term caching of dynamic PHP files.</p>\n\n<p>?</p>\n\n<p>1</p>\n\n<p>2</p>\n\n<p>3</p>\n\n<p>4</p>\n\n<p>&lt;FilesMatch \".(css|eot|flv|gif|htc|ico|jpg|jpeg|js|pdf|png|svg|swf|ttf|woff)$\"&gt;</p>\n\n<p>ExpiresActive On</p>\n\n<p>ExpiresDefault \"access plus 1 week\"</p>\n\n<p>&lt;/FilesMatch&gt;</p>\n\n<p>Enable Flat Catalog/Index</p>\n\n<p>System &gt; Index Management &gt; Enable All</p>\n\n<p>System &gt; Configuration &gt; Catalog &gt; Frontend, set Use Flat Catalog Category/Product to Yes</p>\n\n<p>If you have a large amount of products on your site (&gt;10,000), this update decreases load times on searches, product listings, etc. I can't see this ever slowing down your site, even with only one product, so no reason to not tackle this easy one.</p>\n\n<p>Server Side</p>\n\n<p>Install \"enough\" memory (2GB minimum)</p>\n\n<p>Even if you have very little traffic, ie. less than 100 visits per day, plan on running a minimum of 2GB of memory. Anything more, plan accordingly. Once you hit about 16GB RAM, you will be hitting peak efficiency, and are better off scaling horizontally rather than vertically (more server nodes VS. working with current resources).</p>\n\n<p>Run Lightspeed VS. Apache</p>\n\n<p>For the most part, Lightspeed web server is a direct drop-in replacement for Apache. Virtual Host configurations stay the same, htaccess rules work, and just about everything else including modules and plugins work out of the box without any additional configuration. Lightspeed has a much lighter footprint than apache, as do many other web servers such as Nginx and Lighttpd, but Lightspeed involves little to no additional knowledge of server configurations or etc.</p>\n\n<p>Install APC</p>\n\n<p>Install APC with the command line pecl install apc</p>\n\n<p>Also add the following cache handle to your app/etc/local.xml configuration file</p>\n\n<p>?</p>\n\n<p>1</p>\n\n<p>2</p>\n\n<p>3</p>\n\n<p>4</p>\n\n<p>5</p>\n\n<p>6</p>\n\n<p>7</p>\n\n<p>8</p>\n\n<p>&lt;global&gt;</p>\n\n<p>...</p>\n\n<p>&lt;cache&gt;</p>\n\n<p>&lt;backend&gt;apc&lt;/backend&gt;</p>\n\n<p>&lt;prefix&gt;yourdomain<em>com</em>&lt;/prefix&gt;</p>\n\n<p>&lt;/cache&gt;</p>\n\n<p>...</p>\n\n<p>&lt;/global&gt;</p>\n\n<p>Just installing APC, with no configuration, whatsoever, decreased page load time by about 20% on my clean Magento install, and decreased TTFP by about 30%! APC is one of the best bytecode compressor's for PHP, and has been tried and true on many Magento installations so far, so there is no need to look elsewhere.</p>\n\n<p>Enable KeepAlive's</p>\n\n<p>Add the following lines to your Apache configuration file</p>\n\n<pre class=\"lang:apache decode:true \" >  \nKeepAlive On\n\nKeepAliveTimeout 2  \n</pre> \n\n<p>Apache KeepAlive keeps the TCP connection open between the client and the server, allowing multiple requests to be served over the same connection. This removes some overhead with sites serving up a lot of concurrent HTTP requests.</p>\n\n<pre class=\"lang:apache decode:true \" >Disable open_basedir</pre> \n\n\nAdd the following line to your Apache configuration file\n\n\n<pre class=\"lang:apache decode:true \" >php_admin_value open_basedir none  \n</pre> \n\n<p>The open_basedir parameter is a security feature that restricts filesystem lookups, but can hurt performance on applications with a large filesystem footprint like Magento. Disable it to lower lstat lookups. Find out more about this setting by reading this article by Nexcess.</p>\n\n<p>Client Side</p>\n\n<p>Use a CDN</p>\n\n<p>This could fall under a Server Side upgrade, but the results are really drastic on the client side. A Content Delivery Network can improve your data cache, reduce latency, and increase redundancy for your web site. But the simple reason to use it is that it speeds up your website instantly. Ashley Schroder has a good article on integrating Magento with Amazon Cloudfront that makes it very simple to get up and running with a CDN, and Nexcess has a good article on setting up a CDN with Magento using their own CDN network.</p>\n\n<p>Database Related</p>\n\n<p>Enable the Query Cache</p>\n\n<p>Add the following lines to your /etc/my.conf file</p>\n\n<pre class=\"lang:default decode:true \" >query_cache_type=1\n\nquery\\_cache\\_size=64M</pre> \n\n<p>This caches a certain amount of MySQL statements so they do not need to be run again. Easy mod for a nice enhancement!</p>\n\n<p>Run MySQLTuner</p>\n\n<pre class=\"lang:sh decode:true \" >wget <a href='http://mysqltuner.com/mysqltuner.pl'>http://mysqltuner.com/mysqltuner.pl</a>\n\nperl mysqltuner.pl</pre> \n\n<p>This perl script monitors your current MySQL install and provides recommendations and suggestions for tweaks to your my.cnf file. Very informative stuff here!</p>\n\n<p>via <a href=\"http://markshust.com/2012/02/13/golden-master-list-magento-performance-enhancements\">The Golden Master List of Magento Performance Enhancements | Mark Shust</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1398888274719,"created_by":1,"updated_at":1398888357169,"updated_by":1,"published_at":1349085600000,"published_by":1},{"id":5,"uuid":"379ceeeb-139e-4502-a844-310b32381ce6","title":"Magento – use Redis as cache backend","slug":"magento-use-redis-as-cache-backend","markdown":"Magento – use Redis as cache backend\n\nWe will configure Magento to use Redis as main cache backend.\n\n1. Install Redis. (2.4 is required because it supports operating on multiple keys for many operations)\n\n2. Install <a href=\"https://github.com/nicolasff/phpredis\" target=\"_blank\">phpredis</a>. <a href=\"https://github.com/nicolasff/phpredis\" target=\"_blank\">Phpredis</a> is optional, but it is much faster than <a href=\"https://github.com/jdp/redisent\" target=\"_blank\">Redisent</a>.\n\n3. Install this module <a title=\"git://github.com/colinmollenhour/Zend_Cache_Backend_Redis.git\" href=\"git://github.com/colinmollenhour/Zend_Cache_Backend_Redis.git\" target=\"_blank\">git://github.com/colinmollenhour/Zend_Cache_Backend_Redis.git</a>\n\n4. Edit <strong>app/etc/local.xml</strong> to configure\n\nBased on this article we have turned off cache disk :\n<pre class=\"lang:default decode:true\">&amp;lt;cache&amp;gt;\n\n&amp;lt;backend&amp;gt;Zend_Cache_Backend_Redis&amp;lt;/backend&amp;gt;\n\n&amp;lt;slow_backend&amp;gt;database&amp;lt;/slow_backend&amp;gt;\n\n&amp;lt;slow_backend_store_data&amp;gt;0&amp;lt;/slow_backend_store_data&amp;gt;\n\n&amp;lt;auto_refresh_fast_cache&amp;gt;0&amp;lt;/auto_refresh_fast_cache&amp;gt;\n\n&amp;lt;backend_options&amp;gt;\n\n&amp;lt;server&amp;gt;127.0.0.1&amp;lt;/server&amp;gt;\n\n&amp;lt;port&amp;gt;6379&amp;lt;/port&amp;gt;\n\n&amp;lt;database&amp;gt;database&amp;lt;/database&amp;gt;\n\n&amp;lt;use_redisent&amp;gt;0&amp;lt;/use_redisent&amp;gt; &amp;lt;!-- 0 for phpredis, 1 for redisent --&amp;gt;\n\n&amp;lt;automatic_cleaning_factor&amp;gt;20000&amp;lt;/automatic_cleaning_factor&amp;gt; &amp;lt;!-- optional, 20000 is the default, 0 disables auto clean --&amp;gt;\n\n&amp;lt;/backend_options&amp;gt;\n\n&amp;lt;/cache&amp;gt;</pre>\nTo check if everything works fine you can use redis-cli :\n<pre class=\"lang:default decode:true\">root@vm:~$ redis-cli\n\nredis 120.0.01:6379&amp;gt; select database\n\nOK\n\nredis 127.0.0.1:6379&amp;gt; keys *\n\n1) \"zc:d:97a_REC_0000000510\"\n\n2) \"zc:d:97a_REC_0000000511\"\n\n3) \"zc:d:97a_REC_0000001240\"\n\n4) \"zc:d:97a_REC_0000000512\"\n\n.......</pre>\nAs you can see, there are a lot of cache indexes in Redis database.\n\nSource code : link\n\nBenchmark class : benchmark.php\n\nvia <a href=\"http://blog.flexishore.com/2011/09/magento-use-redis-as-cache-backend/\">Magento – use Redis as cache backend | Flexishore's Blog</a>.","html":"<p>Magento – use Redis as cache backend</p>\n\n<p>We will configure Magento to use Redis as main cache backend.</p>\n\n<ol>\n<li><p>Install Redis. (2.4 is required because it supports operating on multiple keys for many operations)</p></li>\n<li><p>Install <a href=\"https://github.com/nicolasff/phpredis\" target=\"_blank\">phpredis</a>. <a href=\"https://github.com/nicolasff/phpredis\" target=\"_blank\">Phpredis</a> is optional, but it is much faster than <a href=\"https://github.com/jdp/redisent\" target=\"_blank\">Redisent</a>.</p></li>\n<li><p>Install this module <a title=\"git://github.com/colinmollenhour/Zend_Cache_Backend_Redis.git\" href=\"git://github.com/colinmollenhour/Zend_Cache_Backend_Redis.git\" target=\"_blank\">git://github.com/colinmollenhour/Zend<em>Cache</em>Backend_Redis.git</a></p></li>\n<li><p>Edit <strong>app/etc/local.xml</strong> to configure</p></li>\n</ol>\n\n<p>Based on this article we have turned off cache disk :  </p>\n\n<pre class=\"lang:default decode:true\">&amp;lt;cache&amp;gt;\n\n&amp;lt;backend&amp;gt;Zend_Cache_Backend_Redis&amp;lt;/backend&amp;gt;\n\n&amp;lt;slow_backend&amp;gt;database&amp;lt;/slow_backend&amp;gt;\n\n&amp;lt;slow_backend_store_data&amp;gt;0&amp;lt;/slow_backend_store_data&amp;gt;\n\n&amp;lt;auto_refresh_fast_cache&amp;gt;0&amp;lt;/auto_refresh_fast_cache&amp;gt;\n\n&amp;lt;backend_options&amp;gt;\n\n&amp;lt;server&amp;gt;127.0.0.1&amp;lt;/server&amp;gt;\n\n&amp;lt;port&amp;gt;6379&amp;lt;/port&amp;gt;\n\n&amp;lt;database&amp;gt;database&amp;lt;/database&amp;gt;\n\n&amp;lt;use_redisent&amp;gt;0&amp;lt;/use_redisent&amp;gt; &amp;lt;!-- 0 for phpredis, 1 for redisent --&amp;gt;\n\n&amp;lt;automatic_cleaning_factor&amp;gt;20000&amp;lt;/automatic_cleaning_factor&amp;gt; &amp;lt;!-- optional, 20000 is the default, 0 disables auto clean --&amp;gt;\n\n&amp;lt;/backend_options&amp;gt;\n\n&amp;lt;/cache&amp;gt;</pre>\n\n<p>To check if everything works fine you can use redis-cli :  </p>\n\n<pre class=\"lang:default decode:true\">root@vm:~$ redis-cli\n\nredis 120.0.01:6379&amp;gt; select database\n\nOK\n\nredis 127.0.0.1:6379&amp;gt; keys *\n\n1) \"zc:d:97a_REC_0000000510\"\n\n2) \"zc:d:97a_REC_0000000511\"\n\n3) \"zc:d:97a_REC_0000001240\"\n\n4) \"zc:d:97a_REC_0000000512\"\n\n.......</pre>\n\n<p>As you can see, there are a lot of cache indexes in Redis database.</p>\n\n<p>Source code : link</p>\n\n<p>Benchmark class : benchmark.php</p>\n\n<p>via <a href=\"http://blog.flexishore.com/2011/09/magento-use-redis-as-cache-backend/\">Magento – use Redis as cache backend | Flexishore's Blog</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1398888327722,"created_by":1,"updated_at":1398888327722,"updated_by":1,"published_at":1349085600000,"published_by":1},{"id":6,"uuid":"906b72df-3467-4056-b96e-77710452202e","title":"Colin Mollenhour's Technical Blog » Benchmarking Zend_Cache backends for Magento","slug":"colin-mollenhours-technical-blog-benchmarking-zend_cache-backends-for-magento","markdown":"Benchmarking Zend_Cache backends for Magento\n\nThe Zend_Cache module from the Zend Framework is a nice piece of work. It has a slew of programmer-friendly frontends and a respectable set of backends with a well-designed interface. I love the a-la-carte approach, but I am only really interested in the Zend_Cache_Core frontend and the backends that support tagging since that is what is required by Magento. This begs the question, which backend should you use? While I have my own opinion on that matter (ahem, Redis. -post coming soon-ish), I wanted a reliable way to test Zend_Cache backend performances so I wrote a benchmark! This benchmark was both forked from and inspired by the benchmark found in Vinai Kopp’s Symlink Cache. It uses Magento’s core/cache model rather than Zend_Cache_Core directly so a Magento (or Magento-lite) installation and bash are the only requirements.\n\nThe purpose of this post is not to provide a bunch of cache backend benchmarks, but rather to simply introduce my benchmark code in the hopes that others conduct their own tests and hopefully publish their findings. A link to this post is appreciated. Also, if there are any criticisms of the benchmark I’d love to see a pull request. :)\n\nThe benchmark suite is fully-featured:\n\nRepeatable tests. Dataset is written to static files so the exact same test can be repeated, even with entirely different backends.\n\nTest datasets can easily be zipped up and copied to different environments or shared for others to use.\n\nCan relatively easily test multiple pre-generated datasets to compare different scenarios on the same hardware.\n\nUses true multi-process benchmarking, each process with a different set of random operations.\n\nFlexible dataset generation via options to init command. Cache record data size, number of tags, expiration, popularity and volatility are all randomized.\n\nCurrently the benchmarks are run via the command line so testing the APC backend or any others that only work via a cgi or apache module environment will not work. This could be remedied easily enough with the use of CuRL and some php copy/paste if you had the desire to test on your actual web server.\n\nHere is an example run using the Redis backend using my dev environment, a Lubuntu VirtualBox guest:\n<code>\nCache Backend: Zend_Cache_Backend_Redis\n\nLoading 'default' test data...\n\nLoaded 10000 cache records in 29.1080 seconds. Data size is 5008.9K\n\nAnalyzing current cache contents...\n\nCounted 10023 cache IDs and 2005 cache tags in 0.2062 seconds\n\nBenchmarking getIdsMatchingTags...\n\nAverage: 0.00036 seconds (36.82 ids per tag)\n\nBenchmarking 4 concurrent clients, each with 100000 operations...\n\n4 concurrent clients completed in 62 seconds\n\n| reads| writes| cleans\n\n------------------------------------\n\nClient 1| 1811.83| 184.66| 6.81\n\nClient 2| 1799.84| 165.29| 6.91\n\nClient 3| 1818.90| 165.17| 6.79\n\nClient 0| 1790.91| 153.56| 7.40\n\n------------------------------------\n\nops/sec | 7221.48| 668.68| 27.91</code>\n\nThe important numbers to look at are the summed ops/sec. Given the three variables: dataset, hardware and backend, it is easy to change just one of these without affecting the others so this benchmark can be used to test any one of the three variables reliably. The three metrics observed are reads, writes and cleans. The first two are pretty self-explanatory. The third is a clean operation on a single tag using Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG which is the only mode Magento ever uses other than Zend_Cache::CLEANING_MODE_ALL for manual cache refreshes. Individual read/write operations are very fast so given the large number of operations in a test I did not feel the need to examine min, max, average, or standard deviations.\n\nThe test uses (hopefully) sane defaults for dataset generation parameters, but there is plenty of flexibility. I advise you to examine your production environment (number of cache keys, number of cache tags, number of concurrent clients) to tweak the test to more closely match your own environment. Here is the output of the --help cli parameter:\n<code>\n$ php shell/cache-benchmark.php --help\n\nThis script will either initialize a new benchmark dataset or run a benchmark.\n\nUsage: php -f shell/cache-benchmark.php [command] [options]\n\nCommands:\n\ninit [options] Initialize a new dataset.\n\nload --name &lt;string&gt; Load an existing dataset.\n\nclean Flush the cache backend.\n\ntags Benchmark getIdsMatchingTags method.\n\nops [options] Execute a pre-generated set of operations on the existing cache.\n\n'init' options:\n\n--name &lt;string&gt; A unique name for this dataset (default to \"default\")\n\n--keys &lt;num&gt; Number of cache keys (default to 10000)\n\n--tags &lt;num&gt; Number of cache tags (default to 2000)\n\n--min-tags &lt;num&gt; The min number of tags to use for each record (default 0)\n\n--max-tags &lt;num&gt; The max number of tags to use for each record (default 15)\n\n--min-rec-size &lt;num&gt; The smallest size for a record (default 1)\n\n--max-rec-size &lt;num&gt; The largest size for a record (default 1024)\n\n--clients &lt;num&gt; The number of clients for multi-threaded testing (defaults to 4)\n\n--seed &lt;num&gt; The random number generator seed (default random)\n\n'ops' options:\n\n--name &lt;string&gt; The dataset to use (from the --name option from init command)\n\n--client &lt;num&gt; Client number (0-n where n is --clients option from init command)\n\n-q|--quiet Be less verbose.</code>\n\nTo handle multi-process benchmarking the test is actually launched from a shell script which backgrounds each client and sums the results using awk so unless you are doing single-process benchmarks you never need to invoke the ‘ops’ command yourself.\n\nGive me the code already!\n\nThe code is hosted at github.com/colinmollenhour/magento-cache-benchmark. If you use modman you can install it like so:\n\nmodman cachebench clone git://github.com/colinmollenhour/magento-cache-benchmark.git\n\nOr, you may also download it directly and just extract cache-benchmark.php to the “shell” folder in your Magento installation.\n\nRun a test!\n\nAssuming you’ve cloned/downloaded the code already, here is how you run your first test:\n\nphp shell/cache-benchmark.php init\n\nbash var/cachebench/default/run.sh\n\nCould it get any easier?\n\nPS. I included a “Null” backend which is just a black hole for the purpose of getting a general idea of your PHP overhead.\n\nvia <a href=\"http://colin.mollenhour.com/2011/10/03/benchmarking-zend_cache-backends-for-magento/\">Colin Mollenhour's Technical Blog » Benchmarking Zend_Cache backends for Magento</a>.","html":"<p>Benchmarking Zend_Cache backends for Magento</p>\n\n<p>The Zend<em>Cache module from the Zend Framework is a nice piece of work. It has a slew of programmer-friendly frontends and a respectable set of backends with a well-designed interface. I love the a-la-carte approach, but I am only really interested in the Zend</em>Cache<em>Core frontend and the backends that support tagging since that is what is required by Magento. This begs the question, which backend should you use? While I have my own opinion on that matter (ahem, Redis. -post coming soon-ish), I wanted a reliable way to test Zend</em>Cache backend performances so I wrote a benchmark! This benchmark was both forked from and inspired by the benchmark found in Vinai Kopp’s Symlink Cache. It uses Magento’s core/cache model rather than Zend<em>Cache</em>Core directly so a Magento (or Magento-lite) installation and bash are the only requirements.</p>\n\n<p>The purpose of this post is not to provide a bunch of cache backend benchmarks, but rather to simply introduce my benchmark code in the hopes that others conduct their own tests and hopefully publish their findings. A link to this post is appreciated. Also, if there are any criticisms of the benchmark I’d love to see a pull request. :)</p>\n\n<p>The benchmark suite is fully-featured:</p>\n\n<p>Repeatable tests. Dataset is written to static files so the exact same test can be repeated, even with entirely different backends.</p>\n\n<p>Test datasets can easily be zipped up and copied to different environments or shared for others to use.</p>\n\n<p>Can relatively easily test multiple pre-generated datasets to compare different scenarios on the same hardware.</p>\n\n<p>Uses true multi-process benchmarking, each process with a different set of random operations.</p>\n\n<p>Flexible dataset generation via options to init command. Cache record data size, number of tags, expiration, popularity and volatility are all randomized.</p>\n\n<p>Currently the benchmarks are run via the command line so testing the APC backend or any others that only work via a cgi or apache module environment will not work. This could be remedied easily enough with the use of CuRL and some php copy/paste if you had the desire to test on your actual web server.</p>\n\n<p>Here is an example run using the Redis backend using my dev environment, a Lubuntu VirtualBox guest: <br />\n<code> <br />\nCache Backend: Zend<em>Cache</em>Backend_Redis</p>\n\n<p>Loading 'default' test data...</p>\n\n<p>Loaded 10000 cache records in 29.1080 seconds. Data size is 5008.9K</p>\n\n<p>Analyzing current cache contents...</p>\n\n<p>Counted 10023 cache IDs and 2005 cache tags in 0.2062 seconds</p>\n\n<p>Benchmarking getIdsMatchingTags...</p>\n\n<p>Average: 0.00036 seconds (36.82 ids per tag)</p>\n\n<p>Benchmarking 4 concurrent clients, each with 100000 operations...</p>\n\n<p>4 concurrent clients completed in 62 seconds</p>\n\n<p>| reads| writes| cleans</p>\n\n<hr />\n\n<p>Client 1| 1811.83| 184.66| 6.81</p>\n\n<p>Client 2| 1799.84| 165.29| 6.91</p>\n\n<p>Client 3| 1818.90| 165.17| 6.79</p>\n\n<p>Client 0| 1790.91| 153.56| 7.40</p>\n\n<hr />\n\n<p>ops/sec | 7221.48| 668.68| 27.91</code></p>\n\n<p>The important numbers to look at are the summed ops/sec. Given the three variables: dataset, hardware and backend, it is easy to change just one of these without affecting the others so this benchmark can be used to test any one of the three variables reliably. The three metrics observed are reads, writes and cleans. The first two are pretty self-explanatory. The third is a clean operation on a single tag using Zend<em>Cache::CLEANING</em>MODE<em>MATCHING</em>ANY<em>TAG which is the only mode Magento ever uses other than Zend</em>Cache::CLEANING<em>MODE</em>ALL for manual cache refreshes. Individual read/write operations are very fast so given the large number of operations in a test I did not feel the need to examine min, max, average, or standard deviations.</p>\n\n<p>The test uses (hopefully) sane defaults for dataset generation parameters, but there is plenty of flexibility. I advise you to examine your production environment (number of cache keys, number of cache tags, number of concurrent clients) to tweak the test to more closely match your own environment. Here is the output of the --help cli parameter: <br />\n<code> <br />\n$ php shell/cache-benchmark.php --help</p>\n\n<p>This script will either initialize a new benchmark dataset or run a benchmark.</p>\n\n<p>Usage: php -f shell/cache-benchmark.php [command] [options]</p>\n\n<p>Commands:</p>\n\n<p>init [options] Initialize a new dataset.</p>\n\n<p>load --name &lt;string&gt; Load an existing dataset.</p>\n\n<p>clean Flush the cache backend.</p>\n\n<p>tags Benchmark getIdsMatchingTags method.</p>\n\n<p>ops [options] Execute a pre-generated set of operations on the existing cache.</p>\n\n<p>'init' options:</p>\n\n<p>--name &lt;string&gt; A unique name for this dataset (default to \"default\")</p>\n\n<p>--keys &lt;num&gt; Number of cache keys (default to 10000)</p>\n\n<p>--tags &lt;num&gt; Number of cache tags (default to 2000)</p>\n\n<p>--min-tags &lt;num&gt; The min number of tags to use for each record (default 0)</p>\n\n<p>--max-tags &lt;num&gt; The max number of tags to use for each record (default 15)</p>\n\n<p>--min-rec-size &lt;num&gt; The smallest size for a record (default 1)</p>\n\n<p>--max-rec-size &lt;num&gt; The largest size for a record (default 1024)</p>\n\n<p>--clients &lt;num&gt; The number of clients for multi-threaded testing (defaults to 4)</p>\n\n<p>--seed &lt;num&gt; The random number generator seed (default random)</p>\n\n<p>'ops' options:</p>\n\n<p>--name &lt;string&gt; The dataset to use (from the --name option from init command)</p>\n\n<p>--client &lt;num&gt; Client number (0-n where n is --clients option from init command)</p>\n\n<p>-q|--quiet Be less verbose.</code></p>\n\n<p>To handle multi-process benchmarking the test is actually launched from a shell script which backgrounds each client and sums the results using awk so unless you are doing single-process benchmarks you never need to invoke the ‘ops’ command yourself.</p>\n\n<p>Give me the code already!</p>\n\n<p>The code is hosted at github.com/colinmollenhour/magento-cache-benchmark. If you use modman you can install it like so:</p>\n\n<p>modman cachebench clone git://github.com/colinmollenhour/magento-cache-benchmark.git</p>\n\n<p>Or, you may also download it directly and just extract cache-benchmark.php to the “shell” folder in your Magento installation.</p>\n\n<p>Run a test!</p>\n\n<p>Assuming you’ve cloned/downloaded the code already, here is how you run your first test:</p>\n\n<p>php shell/cache-benchmark.php init</p>\n\n<p>bash var/cachebench/default/run.sh</p>\n\n<p>Could it get any easier?</p>\n\n<p>PS. I included a “Null” backend which is just a black hole for the purpose of getting a general idea of your PHP overhead.</p>\n\n<p>via <a href=\"http://colin.mollenhour.com/2011/10/03/benchmarking-zend_cache-backends-for-magento/\">Colin Mollenhour's Technical Blog » Benchmarking Zend_Cache backends for Magento</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1398888438909,"created_by":1,"updated_at":1398888438909,"updated_by":1,"published_at":1349085600000,"published_by":1},{"id":7,"uuid":"ab656cb9-2a16-46d0-abcb-a29d210f220f","title":"Maak minder HTTP requests","slug":"maak-minder-http-requests","markdown":"<p class=\"lead\">Maar liefst 80% van de responstijd wordt bepaald aan de front-end.</p>\nHet is vaak interessant om je server te optimaliseren maar dus nóg interessanter om je front-end te optimaliseren. De meeste front-end tijd wordt verbruikt tijdens het downloaden van alle onderdeeltjes op je website. Plaatjes, CSS, javascript, misschien zelfs Flash (hou er alsjeblieft mee op!). Voor je het weet worden er tientallen onderdeeltjes opgehaald om één webpagina te laten zien. Verminderen van het aantal onderdelen leidt tot het verminderen van het aantal HTTP requests. Verminderen van het aantal HTTP requests leidt weer tot een snellere site. Maar hoe zorg je nu dat je minder http request gebruikt om een webpagina te laden? Je zou kunnen zeggen door het design te versimpelen. Wég plaatjes, wég video, weg advertenties, wég games, en ga zo maar door. Maar dat willen we natuurlijk niet! We willen strak vormgegeven websites met geavanceerde functionaliteit. Het liefst nog supersnel ook, anders lopen de bezoekers van onze site doodleuk weg naar de concurrentie. Daarom zijn er een aantal technieken bedacht om minder http requests te maken terwijl we tóch die geweldige sites kunnen bouwen. Dit zijn:\n<ul>\n\t<li class=\"p1\">Combineren van CSS – in het kort: maak van meerdere .css bestanden één</li>\n\t<li class=\"p1\">Combineren van JavaScript – je raadde het al; maak van meerdere .js bestanden één</li>\n\t<li class=\"p1\">CSS sprites – maak van meerdere afbeeldingen één (vooral gebruikt voor iconen, buttons en andere user interface elementen, niet voor een foto bij een artikel)</li>\n</ul>\n<h2>CSS sprites</h2>\nBijvoorbeeld Bol.com gebruikt dit op zijn site voor verschillende iconen. Alhoewel ik er direct bij moet zeggen dat zij niet het beste voorbeeld geven aangezien er nog talloze kleine afbeeldingen geladen worden die niet in een CSS sprite staan.\n\n<a href=\"http://joostvanderlaan.nl/wp-content/uploads/2013/07/bol-com-sprite.png\"><img src=\"http://joostvanderlaan.nl/wp-content/uploads/2013/07/bol-com-sprite.png\" alt=\"bol-com-sprite\" width=\"60\" height=\"112\" class=\"alignnone size-full wp-image-115\" /></a><a href=\"http://joostvanderlaan.nl/wp-content/uploads/2013/07/bol-com-sprite2.png\"><img src=\"http://joostvanderlaan.nl/wp-content/uploads/2013/07/bol-com-sprite2.png\" alt=\"bol-com-sprite2\" width=\"62\" height=\"150\" class=\"alignnone size-full wp-image-116\" /></a>\n\nWat dat betreft doet google het beter, zij hebben nagenoeg álle afbeeldingen die horen bij de besturing van de zoekpagina in één CSS sprite staan.\n\n<a href=\"http://joostvanderlaan.nl/wp-content/uploads/2013/07/google-com-sprite.png\"><img src=\"http://joostvanderlaan.nl/wp-content/uploads/2013/07/google-com-sprite.png\" alt=\"google-com-sprite\" width=\"167\" height=\"389\" class=\"alignnone size-full wp-image-117\" /></a>\n<h2>Let’s get it fast</h2>\n<h3>Combineren van CSS &amp; Javascript</h3>\nStarten doe ik met algemene tips, daarna geef ik voor Wordpress, Drupal en Magento specifieke tips. Voor Apache webserver gebruikers: installeer <a href=\"https://developers.google.com/speed/pagespeed/mod\">mod_pagespeed</a> van Google. Simpel en doeltreffend. Naast het combineren van Javascript en CSS doet deze plugin voor nog veel meer, lees daarover op de <a href=\"https://developers.google.com/speed/pagespeed/mod\">plugin website.</a>\n<h3>CSS sprites</h3>\nOp internet zijn er tools te vinden waarmee je zelf meerdere afbeeldingen tot één CSS sprite kunt laten combineren. Je upload een aantal afbeeldingen en krijgt 1 afbeelding (waar alle andere afbeeldingen in gecombineerd zijn) én een stukje CSS terug. Met die CSS kun je vervolgens alle verschillende afbeeldingen weer aanroepen. Een voorbeeld van zo’n tool is CSS sprite generator. <a href=\"http://spritegen.website-performance.org/\">CSS sprite generator</a>\n<h3>Tips voor Wordpress</h3>\nWat doet het: CSS en JS combineren (en minify, oftewel verkleinen) <a href=\"http://wordpress.org/extend/plugins/bwp-minify/\">Better Wordpress Minify</a> Met de ‘alleskunner’ W3 total cache kan het ook, maar met deze heb ik betere ervaringen. Sommige plugins werken niet met W3, wel met <a href=\"http://wordpress.org/extend/plugins/bwp-minify/\">Better Wordpress Minify</a>.\n<h3>Tips voor Drupal</h3>\n<strong>Combineren van CSS &amp; JavaScript</strong>\n\nDrupal heeft deze functionaliteit ingebouwd. Je hoeft het alleen maar aan te zetten in: Configuration &gt; Development &gt; Performance en zet vervolgens de vinkjes aan bij:\n<ul>\n\t<li>Aggregate and compress CSS files.</li>\n\t<li>Aggregate JavaScript files.</li>\n</ul>\nWil je meer? Installeer dan de module <a href=\"http://drupal.org/project/speedy\">Speedy</a>, deze module zorgt ervoor dat de javascript bestanden die gecombineerd worden een stuk kleiner zijn. (Minify) CSS sprites Drupal biedt als enige een module om CSS sprites te maken, bij de andere CMS systemen zul je het zelf moeten doen. Gebruik hiervoor <a href=\"http://drupal.org/project/spritesheets\">Spritesheets.</a>\n<h3>Tips voor Magento</h3>\nOok Magento heeft deze functionaliteit ingebouwd. Je hoeft het alleen maar aan te zetten in: Systeem &gt; Geavanceerd &gt; Ontwikkelaar en stel ‘ja’in bij:\n<ul>\n\t<li>JavaScript-bestanden samenvoegen</li>\n\t<li>CSS bestanden samengevoegen</li>\n</ul>\nMagento voert op dit moment (versie 1.7) nog géén minify uit. Hiervoor kun je de plugins <a href=\"http://www.magentocommerce.com/magento-connect/fooman-speedster.html\">Fooman Speedster</a>, <a href=\"http://www.magentocommerce.com/magento-connect/fooman-speedster-enterprise-5817.html\">Fooman Speedster Enterprise</a> of <a href=\"http://www.magentocommerce.com/magento-connect/js-css-compression-and-minify-user-interface-optimization.html\">Diglin UI optimization</a> gebruiken. (maximale mogelijkheden maar moeilijker in te stellen)","html":"<p class=\"lead\">Maar liefst 80% van de responstijd wordt bepaald aan de front-end.</p>  \n\n<p>Het is vaak interessant om je server te optimaliseren maar dus nóg interessanter om je front-end te optimaliseren. De meeste front-end tijd wordt verbruikt tijdens het downloaden van alle onderdeeltjes op je website. Plaatjes, CSS, javascript, misschien zelfs Flash (hou er alsjeblieft mee op!). Voor je het weet worden er tientallen onderdeeltjes opgehaald om één webpagina te laten zien. Verminderen van het aantal onderdelen leidt tot het verminderen van het aantal HTTP requests. Verminderen van het aantal HTTP requests leidt weer tot een snellere site. Maar hoe zorg je nu dat je minder http request gebruikt om een webpagina te laden? Je zou kunnen zeggen door het design te versimpelen. Wég plaatjes, wég video, weg advertenties, wég games, en ga zo maar door. Maar dat willen we natuurlijk niet! We willen strak vormgegeven websites met geavanceerde functionaliteit. Het liefst nog supersnel ook, anders lopen de bezoekers van onze site doodleuk weg naar de concurrentie. Daarom zijn er een aantal technieken bedacht om minder http requests te maken terwijl we tóch die geweldige sites kunnen bouwen. Dit zijn:  </p>\n\n<ul>  \n    <li class=\"p1\">Combineren van CSS – in het kort: maak van meerdere .css bestanden één</li>\n    <li class=\"p1\">Combineren van JavaScript – je raadde het al; maak van meerdere .js bestanden één</li>\n    <li class=\"p1\">CSS sprites – maak van meerdere afbeeldingen één (vooral gebruikt voor iconen, buttons en andere user interface elementen, niet voor een foto bij een artikel)</li>\n</ul>  \n\n<h2>CSS sprites</h2>  \n\n<p>Bijvoorbeeld Bol.com gebruikt dit op zijn site voor verschillende iconen. Alhoewel ik er direct bij moet zeggen dat zij niet het beste voorbeeld geven aangezien er nog talloze kleine afbeeldingen geladen worden die niet in een CSS sprite staan.</p>\n\n<p><a href=\"http://joostvanderlaan.nl/wp-content/uploads/2013/07/bol-com-sprite.png\"><img src=\"http://joostvanderlaan.nl/wp-content/uploads/2013/07/bol-com-sprite.png\" alt=\"bol-com-sprite\" width=\"60\" height=\"112\" class=\"alignnone size-full wp-image-115\" /></a><a href=\"http://joostvanderlaan.nl/wp-content/uploads/2013/07/bol-com-sprite2.png\"><img src=\"http://joostvanderlaan.nl/wp-content/uploads/2013/07/bol-com-sprite2.png\" alt=\"bol-com-sprite2\" width=\"62\" height=\"150\" class=\"alignnone size-full wp-image-116\" /></a></p>\n\n<p>Wat dat betreft doet google het beter, zij hebben nagenoeg álle afbeeldingen die horen bij de besturing van de zoekpagina in één CSS sprite staan.</p>\n\n<p><a href=\"http://joostvanderlaan.nl/wp-content/uploads/2013/07/google-com-sprite.png\"><img src=\"http://joostvanderlaan.nl/wp-content/uploads/2013/07/google-com-sprite.png\" alt=\"google-com-sprite\" width=\"167\" height=\"389\" class=\"alignnone size-full wp-image-117\" /></a>  </p>\n\n<h2>Let’s get it fast</h2>  \n\n<h3>Combineren van CSS &amp; Javascript</h3>  \n\n<p>Starten doe ik met algemene tips, daarna geef ik voor Wordpress, Drupal en Magento specifieke tips. Voor Apache webserver gebruikers: installeer <a href=\"https://developers.google.com/speed/pagespeed/mod\">mod_pagespeed</a> van Google. Simpel en doeltreffend. Naast het combineren van Javascript en CSS doet deze plugin voor nog veel meer, lees daarover op de <a href=\"https://developers.google.com/speed/pagespeed/mod\">plugin website.</a>  </p>\n\n<h3>CSS sprites</h3>  \n\n<p>Op internet zijn er tools te vinden waarmee je zelf meerdere afbeeldingen tot één CSS sprite kunt laten combineren. Je upload een aantal afbeeldingen en krijgt 1 afbeelding (waar alle andere afbeeldingen in gecombineerd zijn) én een stukje CSS terug. Met die CSS kun je vervolgens alle verschillende afbeeldingen weer aanroepen. Een voorbeeld van zo’n tool is CSS sprite generator. <a href=\"http://spritegen.website-performance.org/\">CSS sprite generator</a>  </p>\n\n<h3>Tips voor Wordpress</h3>  \n\n<p>Wat doet het: CSS en JS combineren (en minify, oftewel verkleinen) <a href=\"http://wordpress.org/extend/plugins/bwp-minify/\">Better Wordpress Minify</a> Met de ‘alleskunner’ W3 total cache kan het ook, maar met deze heb ik betere ervaringen. Sommige plugins werken niet met W3, wel met <a href=\"http://wordpress.org/extend/plugins/bwp-minify/\">Better Wordpress Minify</a>.  </p>\n\n<h3>Tips voor Drupal</h3>  \n\n<p><strong>Combineren van CSS &amp; JavaScript</strong></p>\n\n<p>Drupal heeft deze functionaliteit ingebouwd. Je hoeft het alleen maar aan te zetten in: Configuration &gt; Development &gt; Performance en zet vervolgens de vinkjes aan bij:  </p>\n\n<ul>  \n    <li>Aggregate and compress CSS files.</li>\n    <li>Aggregate JavaScript files.</li>\n</ul>  \n\n<p>Wil je meer? Installeer dan de module <a href=\"http://drupal.org/project/speedy\">Speedy</a>, deze module zorgt ervoor dat de javascript bestanden die gecombineerd worden een stuk kleiner zijn. (Minify) CSS sprites Drupal biedt als enige een module om CSS sprites te maken, bij de andere CMS systemen zul je het zelf moeten doen. Gebruik hiervoor <a href=\"http://drupal.org/project/spritesheets\">Spritesheets.</a>  </p>\n\n<h3>Tips voor Magento</h3>  \n\n<p>Ook Magento heeft deze functionaliteit ingebouwd. Je hoeft het alleen maar aan te zetten in: Systeem &gt; Geavanceerd &gt; Ontwikkelaar en stel ‘ja’in bij:  </p>\n\n<ul>  \n    <li>JavaScript-bestanden samenvoegen</li>\n    <li>CSS bestanden samengevoegen</li>\n</ul>  \n\n<p>Magento voert op dit moment (versie 1.7) nog géén minify uit. Hiervoor kun je de plugins <a href=\"http://www.magentocommerce.com/magento-connect/fooman-speedster.html\">Fooman Speedster</a>, <a href=\"http://www.magentocommerce.com/magento-connect/fooman-speedster-enterprise-5817.html\">Fooman Speedster Enterprise</a> of <a href=\"http://www.magentocommerce.com/magento-connect/js-css-compression-and-minify-user-interface-optimization.html\">Diglin UI optimization</a> gebruiken. (maximale mogelijkheden maar moeilijker in te stellen)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1398888489008,"created_by":1,"updated_at":1398888489008,"updated_by":1,"published_at":1372154400000,"published_by":1},{"id":8,"uuid":"461ec450-22f5-4aab-8369-5637f944c840","title":"Zo maak je je website ongelofelijk snel","slug":"zo-maak-je-je-website-ongelofelijk-snel","markdown":"Supersnelle website regels\n\nDoor Joost van der Laan op zo, 10/07/2012 - 01:06\nRegel 1 - Maak minder HTTP requests - Make Fewer HTTP Requests\n\nRegel 2 - Gebruik een Content Delivery Network (CDN) - Use a Content Delivery Network Regel\n\n3 - Voeg een Expires Header toe - Add an Expires Header Regel\n\n4 - Gebruik Gzip om onderdelen te verkleinen - Gzip Components Regel\n\n5 - Zet Stylesheets (CSS) bovenaan de pagina - Put Stylesheets at the Top Regel\n\n6 - Zet Scripts (JavaScript) onderaan de pagina - Put Scripts at the Bottom Regel\n\n7 - Vermijd het gebruik van CSS Expressies - Avoid CSS Expressions Regel\n\n8 - Maak JavaScript en CSS extern (ander domein)- Make JavaScript and CSS External Regel\n\n9 - Verminder DNS aanvragen - Reduce DNS Lookups Regel\n\n10 - Verklein JavaScript - Minify JavaScript Regel\n\n11 - Vermijd Redirects - Avoid Redirects Regel\n\n12 - Verwijder dubbele scripts - Remove Duplicate Scripts Regel\n\n13 - Stel ETags in - Configure ETags Regel\n\n14 - Maak AJAX Cachebaar - Make AJAX Cacheable","html":"<p>Supersnelle website regels</p>\n\n<p>Door Joost van der Laan op zo, 10/07/2012 - 01:06 <br />\nRegel 1 - Maak minder HTTP requests - Make Fewer HTTP Requests</p>\n\n<p>Regel 2 - Gebruik een Content Delivery Network (CDN) - Use a Content Delivery Network Regel</p>\n\n<p>3 - Voeg een Expires Header toe - Add an Expires Header Regel</p>\n\n<p>4 - Gebruik Gzip om onderdelen te verkleinen - Gzip Components Regel</p>\n\n<p>5 - Zet Stylesheets (CSS) bovenaan de pagina - Put Stylesheets at the Top Regel</p>\n\n<p>6 - Zet Scripts (JavaScript) onderaan de pagina - Put Scripts at the Bottom Regel</p>\n\n<p>7 - Vermijd het gebruik van CSS Expressies - Avoid CSS Expressions Regel</p>\n\n<p>8 - Maak JavaScript en CSS extern (ander domein)- Make JavaScript and CSS External Regel</p>\n\n<p>9 - Verminder DNS aanvragen - Reduce DNS Lookups Regel</p>\n\n<p>10 - Verklein JavaScript - Minify JavaScript Regel</p>\n\n<p>11 - Vermijd Redirects - Avoid Redirects Regel</p>\n\n<p>12 - Verwijder dubbele scripts - Remove Duplicate Scripts Regel</p>\n\n<p>13 - Stel ETags in - Configure ETags Regel</p>\n\n<p>14 - Maak AJAX Cachebaar - Make AJAX Cacheable</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1398888526968,"created_by":1,"updated_at":1398888526968,"updated_by":1,"published_at":1372154400000,"published_by":1},{"id":9,"uuid":"010fcc42-2c6c-425b-829b-18870d0af94a","title":"Wordpress Jetpack langzaam? Maak je blog sneller!","slug":"wordpress-jetpack-langzaam-maak-je-blog-sneller","markdown":"Standaard maakt de Wordpress Jetpack plugin allerlei verbindingen naar andere pagina's waardoor je site traag kan worden. Gelukkig is daar een oplossing voor. Een kleine aanpassing in wp-config.php zorg ervoor dat je site sneller laadt.\n\nToevoegen aan wp-config.php\n<pre class=\"lang:php decode:true\">/** jetpack plugin maakt geen verbinding meer met Wordpress **/\ndefine( 'JETPACK_DEV_DEBUG', true);</pre>\n&nbsp;\n\nStandaard staan alle Jetpack onderdelen nu uit.\n\nAlleen onderstaande kun je nog gebruiken:\nCarousel\nSharing\nGravatar Hovercards\nContact Form\nShortcodes\nCustom CSS\nMobile Theme\nExtra Sidebar Widgets\nInfinite Scroll","html":"<p>Standaard maakt de Wordpress Jetpack plugin allerlei verbindingen naar andere pagina's waardoor je site traag kan worden. Gelukkig is daar een oplossing voor. Een kleine aanpassing in wp-config.php zorg ervoor dat je site sneller laadt.</p>\n\n<p>Toevoegen aan wp-config.php  </p>\n\n<pre class=\"lang:php decode:true\">/** jetpack plugin maakt geen verbinding meer met Wordpress **/  \ndefine( 'JETPACK_DEV_DEBUG', true);</pre>  \n\n<p>&nbsp;</p>\n\n<p>Standaard staan alle Jetpack onderdelen nu uit.</p>\n\n<p>Alleen onderstaande kun je nog gebruiken: <br />\nCarousel <br />\nSharing <br />\nGravatar Hovercards <br />\nContact Form <br />\nShortcodes <br />\nCustom CSS <br />\nMobile Theme <br />\nExtra Sidebar Widgets <br />\nInfinite Scroll</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1398888564646,"created_by":1,"updated_at":1398888564646,"updated_by":1,"published_at":1373796000000,"published_by":1},{"id":10,"uuid":"22f4c48d-f907-496d-aee7-647e5e7ce1e6","title":"The perfect SEO example text","slug":"the-perfect-seo-example-text","markdown":"The first sentence should contain the keywords of the article, in this case 'seo example' are the two keywords we want to be found on in search engines like Google. This article follows all the best practices in writing for SEO. For example, your article heading\n<pre class=\"lang:default decode:true \">&lt;h1&gt;</pre>\n&nbsp;\n\nshould contain the keywords. Since the title is <em>The perfect SEO example text</em> we did this right.\n<h2>Second header</h2>\nThis is the second paragraph.\n\n\n\n\n\n\nThe perfect SEO example text\njoostvanderlaan.nl/the-perfect-seo-example-text/\nHow to write the perfect SEO text. This text is based on the keywords SEO example and follows all of the best practices in SEO writing.\n\n\n\n\n\nFocus keyword: seo example\n\n\n\n\n\nYour focus keyword was found in:\nArticle Heading: Yes (1)\nPage title: Yes (1)\nPage URL: Yes (1)\nContent: Yes (2)\nMeta description: Yes (1)\n\n\n\n\n\nSEO Title: The perfect SEO example text\n\nMeta Description: How to write the perfect SEO text. This text is based on the keywords SEO example and follows all of the best practices in SEO writing.\n\n####Page Analysis\n- There are 73 words contained in the body copy. This is far too low and should be increased.\n- No images appear in this page, consider adding some as appropriate.\n- You have not used your keyword / keyphrase in any subheading (such as an H2) in your copy.\n- The page title contains 28 characters, which is less than the recommended minimum of 40 characters. Use the space to add keyword variations or create compelling call-to-action copy.\n- No outbound links appear in this page, consider adding some as appropriate.\n- The page title contains keyword / phrase, but it does not appear at the beginning; try and move it to the beginning.\n- The keyword / phrase appears in the URL for this page.\n- You've never used this focus keyword before, very good.\n- In the specified meta description, consider: How does it compare to the competition? Could it be made more appealing?\n- The meta description contains the primary keyword / phrase.\nThe keyword appears in the first paragraph of the copy.\n","html":"<p>The first sentence should contain the keywords of the article, in this case 'seo example' are the two keywords we want to be found on in search engines like Google. This article follows all the best practices in writing for SEO. For example, your article heading  </p>\n\n<pre class=\"lang:default decode:true \">&lt;h1&gt;</pre>  \n\n<p>&nbsp;</p>\n\n<p>should contain the keywords. Since the title is <em>The perfect SEO example text</em> we did this right.  </p>\n\n<h2>Second header</h2>  \n\n<p>This is the second paragraph.</p>\n\n<p>The perfect SEO example text <br />\njoostvanderlaan.nl/the-perfect-seo-example-text/ <br />\nHow to write the perfect SEO text. This text is based on the keywords SEO example and follows all of the best practices in SEO writing.</p>\n\n<p>Focus keyword: seo example</p>\n\n<p>Your focus keyword was found in: <br />\nArticle Heading: Yes (1) <br />\nPage title: Yes (1) <br />\nPage URL: Yes (1) <br />\nContent: Yes (2) <br />\nMeta description: Yes (1)</p>\n\n<p>SEO Title: The perfect SEO example text</p>\n\n<p>Meta Description: How to write the perfect SEO text. This text is based on the keywords SEO example and follows all of the best practices in SEO writing.</p>\n\n<h4 id=\"pageanalysis\">Page Analysis</h4>\n\n<ul>\n<li>There are 73 words contained in the body copy. This is far too low and should be increased.</li>\n<li>No images appear in this page, consider adding some as appropriate.</li>\n<li>You have not used your keyword / keyphrase in any subheading (such as an H2) in your copy.</li>\n<li>The page title contains 28 characters, which is less than the recommended minimum of 40 characters. Use the space to add keyword variations or create compelling call-to-action copy.</li>\n<li>No outbound links appear in this page, consider adding some as appropriate.</li>\n<li>The page title contains keyword / phrase, but it does not appear at the beginning; try and move it to the beginning.</li>\n<li>The keyword / phrase appears in the URL for this page.</li>\n<li>You've never used this focus keyword before, very good.</li>\n<li>In the specified meta description, consider: How does it compare to the competition? Could it be made more appealing?</li>\n<li>The meta description contains the primary keyword / phrase.\nThe keyword appears in the first paragraph of the copy.</li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1398888859962,"created_by":1,"updated_at":1398889215578,"updated_by":1,"published_at":1384254000000,"published_by":1},{"id":11,"uuid":"83539585-dcf5-400c-9711-e96f08b072d7","title":"Perfect looking webfonts for Chrome on Windows","slug":"perfect-looking-webfonts-for-chrome-on-windows","markdown":"Font-face webfonts are looking terrible in Chrome on Windows by default. Luckily there is a solution for this common problem. It does involve some work, but it's absolutely worth the trouble. (If you're like me and can't stand the pixelated, grainy looking fonts)\n\n##Step 1\nDownload the Google .TTF font from the Google Webfont directory.\n##Step 2\nConvert the .TTF font on FontSquirrel so you'll get the .EOT .WOFF .SVG formats.\n##Step 3\nCreate CSS in your ```/css``` folder. In this case I'm referencing the fonts which are located in the ```/fonts``` folder.\n\n\n```language-css\n @font-face {\n  font-family: 'Oswald';\n  font-style: normal;\n  font-weight: 700;\n src: url('../fonts/oswald-bold-webfont.eot');\n    src: url('../fonts/oswald-bold-webfont.eot?#iefix') format('embedded-opentype'),\n         url('../fonts/oswald-bold-webfont.woff') format('woff'),\n         url('../fonts/oswald-bold-webfont.ttf') format('truetype'),\n         url('../fonts/oswald-bold-webfont.svg#oswaldbold') format('svg');\n}\n@media screen and (-webkit-min-device-pixel-ratio:0) {\n    @font-face {\n        font-family: 'Oswald';\n          font-style: normal;\n  font-weight: 700;\n        src: url('../fonts/oswald-bold-webfont.svg#oswaldbold') format('svg'),\n             url('../fonts/oswald-bold-webfont.woff') format('woff');\n    }\n ```","html":"<p>Font-face webfonts are looking terrible in Chrome on Windows by default. Luckily there is a solution for this common problem. It does involve some work, but it's absolutely worth the trouble. (If you're like me and can't stand the pixelated, grainy looking fonts)</p>\n\n<h2 id=\"step1\">Step 1</h2>\n\n<p>Download the Google .TTF font from the Google Webfont directory.  </p>\n\n<h2 id=\"step2\">Step 2</h2>\n\n<p>Convert the .TTF font on FontSquirrel so you'll get the .EOT .WOFF .SVG formats.  </p>\n\n<h2 id=\"step3\">Step 3</h2>\n\n<p>Create CSS in your <code>/css</code> folder. In this case I'm referencing the fonts which are located in the <code>/fonts</code> folder.</p>\n\n<p><code>language-css\n @font-face {\n  font-family: 'Oswald';\n  font-style: normal;\n  font-weight: 700;\n src: url('../fonts/oswald-bold-webfont.eot');\n    src: url('../fonts/oswald-bold-webfont.eot?#iefix') format('embedded-opentype'),\n         url('../fonts/oswald-bold-webfont.woff') format('woff'),\n         url('../fonts/oswald-bold-webfont.ttf') format('truetype'),\n         url('../fonts/oswald-bold-webfont.svg#oswaldbold') format('svg');\n}\n@media screen and (-webkit-min-device-pixel-ratio:0) {\n    @font-face {\n        font-family: 'Oswald';\n          font-style: normal;\n  font-weight: 700;\n        src: url('../fonts/oswald-bold-webfont.svg#oswaldbold') format('svg'),\n             url('../fonts/oswald-bold-webfont.woff') format('woff');\n    }\n</code></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1398890309951,"created_by":1,"updated_at":1398891200648,"updated_by":1,"published_at":1398891200422,"published_by":1},{"id":12,"uuid":"8ce68ef7-2885-44cd-bcf3-04c123fc8c6d","title":"About","slug":"about","markdown":"About this blog","html":"<p>About this blog</p>","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1398893689581,"created_by":1,"updated_at":1398893725380,"updated_by":1,"published_at":1398893689586,"published_by":1},{"id":13,"uuid":"1d5d1b01-13bb-465c-8691-2009c6dcedc8","title":"Typography","slug":"typography","markdown":"Typography\n\n\n                        <h2 id=\"creatingbeautifulcontentwithghostion\">Creating Beautiful Content with Ghostion</h2>\n\n<p>Powered by Foundation 5, typography in Ghostion theme is meant to make your life easier by providing clean, attractive, simple default styles for all of the most basic typographical elements.</p>\n\n<p>Ghost uses <strong>Markdown</strong> for writing. Essentially, it's a shorthand way to manage your post formatting as you write. Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use shortcuts to style your content. </p>\n\n<p><img src=\"http://ghostdemo.axiantheme.com/ghostion/demo/typography.jpg\" alt=\"Typography\"></p>\n\n<p><br></p>\n\n<h4 id=\"heading\">Heading</h4>\n\n<p>Ghostion includes styles for all of the header elements that are balanced and based on a modular scale.</p>\n\n<h1 id=\"h1thisisaverylargeheader\">h1. This is a very large header.</h1>\n\n<h2 id=\"h2thisisalargeheader\">h2. This is a large header.</h2>\n\n<h3 id=\"h3thisisamediumheader\">h3. This is a medium header.</h3>\n\n<h4 id=\"h4thisisamoderateheader\">h4. This is a moderate header.</h4>\n\n<h5 id=\"h5thisisasmallheader\">h5. This is a small header.</h5>\n\n<h6 id=\"h6thisisatinyheader\">h6. This is a tiny header.</h6>\n\n<p><br></p>\n\n<h4 id=\"paragraph\">Paragraph</h4>\n\n<p>This is a paragraph. Paragraphs are preset with a font size, line height and spacing to match the overall vertical rhythm.</p>\n\n<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.</p>\n\n<p><br></p>\n\n<h4 id=\"strongandemphasize\">Strong and Emphasize</h4>\n\n<p>Wrap <code>**</code> around type to make it <strong>bold</strong>! You can also use <code>*</code> to <em>italicize</em> your words.</p>\n\n<p><code>**strong**</code> or <code>__strong__</code> <strong>( Cmd + B or Ctrl + B (Windows) )</strong></p>\n\n<p><code>*emphasize*</code> or <code>_emphasize_</code> <strong>( Cmd + I or Ctrl + I (Windows) )</strong></p>\n\n<p><strong>Sometimes I want a lot of text to be bold. Like, seriously, a <em>LOT</em> of text</strong></p>\n\n<p><br></p>\n\n<h4 id=\"lists\">Lists</h4>\n\n<p>Lists are helpful for, well, lists of things.</p>\n\n<p><strong>Ordered lists</strong> are created using \"1.\" + Space:</p>\n\n<ol>\n<li>Ordered list item  </li>\n<li>Ordered list item  </li>\n<li>Ordered list item</li>\n</ol>\n\n<p><strong>Unordered list</strong> are created using \"*\" + Space:</p>\n\n<ul>\n<li>Unordered list item</li>\n<li>Unordered list item</li>\n<li>Unordered list item </li>\n</ul>\n\n<p>Or using \"-\" + Space:</p>\n\n<ul>\n<li>Unordered list item</li>\n<li>Unordered list item</li>\n<li>Unordered list item</li>\n</ul>\n\n<p><br></p>\n\n<h4 id=\"blockquotes\">Blockquotes</h4>\n\n<blockquote>\n  <p>Sometimes other people say smart things, and you may want to mention that through a blockquote callout. We've got you covered. Right angle brackets <strong>&gt;</strong> are used for block quotes.</p>\n</blockquote>\n\n<p><br></p>\n\n<h4 id=\"linksandemail\">Links and Email</h4>\n\n<p>Want to link to a source? No problem. If you paste in url, like <a href=\"http://ghost.org\">http://ghost.org</a> - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! </p>\n\n<p>Simple inline link <code>http://www.axiantheme.com</code> <a href=\"http://www.axiantheme.com\">http://www.axiantheme.com</a>, another inline link <code>[Ghostion](http://ghostion.ghostdemo.axiantheme.com)</code> <a href=\"http://ghostion.ghostdemo.axiantheme.com\">Ghostion</a>, and one more inline link with title <code>[DigitalOcean](https://www.digitalocean.com/?refcode=3bb89a8961ff \"The Best Hosting for Ghost\")</code> <a href=\"https://www.digitalocean.com/?refcode=3bb89a8961ff\" title=\"The Best Hosting for Ghost\">DigitalOcean</a>. </p>\n\n<p>An email <a href=\"mailto:example@example.com\">example@example.com</a> link.</p>\n\n<p><br></p>\n\n<h4 id=\"strikethrough\">Strikethrough</h4>\n\n<p>Wrap with 2 tilde characters <strong>~~Strikethrough~~</strong> :</p>\n\n<p><del>Strikethrough</del></p>\n\n<p><br></p>\n\n<h4 id=\"images\">Images</h4>\n\n<p>Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like the following to make it show up.</p>\n\n<p><code>![Ghostion](http://ghostdemo.axiantheme.com/ghostion/demo/sample_image.jpg)</code></p>\n\n<p><img src=\"http://ghostdemo.axiantheme.com/ghostion/demo/sample_image.jpg\" alt=\"Ghostion\"></p>\n\n<p>An inline image <img src=\"http://ghostdemo.axiantheme.com/ghostion/demo/ghostion_icon.jpg\" alt=\"Ghostion Icon\" title=\"Ghostion Icon\">, title is optional. with the following code:</p>\n\n<p><code>![Ghostion Icon](http://ghostdemo.axiantheme.com/ghostion/demo/ghostion_icon.jpg \"Ghostion Icon\")</code></p>\n\n<p>A <img src=\"http://ghostdemo.axiantheme.com/ghostion/demo/ghostion_icon.jpg\" alt=\"Ghostion Icon\" title=\"Ghostion Icon\"> reference style image, with this code <code>![Ghostion Icon][1]</code>.</p>\n\n<p><code>[1]: http://ghostdemo.axiantheme.com/ghostion/demo/ghostion_icon.jpg \"Ghostion Icon\"</code>\n<br> <br>\n<br></p>\n\n<h4 id=\"codes\">Codes</h4>\n\n<p>Got a streak of geek? We've got you covered there, too. You can write inline <code>&lt;code&gt;</code> blocks really easily with double backticks. </p>\n\n<p>Want to show off something more comprehensive? 4 spaces of indentation or start with a line containing 3 or more backticks, and ends with the first line with the same number of backticks</p>\n\n<pre><code class=\" hljs css\"><span class=\"hljs-class\">.awesome-ghostion</span> <span class=\"hljs-rules\">{\n    <span class=\"hljs-rule\"><span class=\"hljs-attribute\">display</span>:<span class=\"hljs-value\"> block</span></span>;\n    <span class=\"hljs-rule\"><span class=\"hljs-attribute\">width</span>:<span class=\"hljs-value\"> <span class=\"hljs-number\">100</span>%</span></span>;\n<span class=\"hljs-rule\">}</span></span>\n</code></pre>\n\n<p>Ghostion supports syntax highlighting, powered by <a href=\"http://highlightjs.org/\">Highlight.js</a></p>\n\n<pre><code class=\" hljs ruby\">h1, h2, h3, h4, h5, h6 {  \n    <span class=\"hljs-symbol\">color:</span> darken(<span class=\"hljs-variable\">$base_text_color</span>, <span class=\"hljs-number\">10</span>%);\n    font-<span class=\"hljs-symbol\">family:</span> <span class=\"hljs-variable\">$base_font_family</span>;\n    font-<span class=\"hljs-symbol\">weight:</span> bold;\n}\na {  \n    <span class=\"hljs-symbol\">color:</span> <span class=\"hljs-variable\">$primary_color</span>;\n    <span class=\"hljs-variable\">@include</span> transition(color <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">2</span>s ease-<span class=\"hljs-keyword\">in</span>);\n    &amp;<span class=\"hljs-symbol\">:hover</span>, &amp;<span class=\"hljs-symbol\">:focus</span> {\n        <span class=\"hljs-symbol\">color:</span> shade(<span class=\"hljs-variable\">$primary_color</span>, <span class=\"hljs-number\">15</span>%);\n    }\n}\n</code></pre>\n\n<p><br></p>\n\n<h4 id=\"advancedusage\">Advanced Usage</h4>\n\n<p>There's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.</p>\n\n<p><span class=\"label\">Regular Label</span> <span class=\"secondary radius label\">Secondary Radius Label</span> <span class=\"alert round label\">Alert Round Label</span> <span class=\"success label\">Success Label</span></p>\n\n<p><input type=\"text\" placeholder=\"This is Input\"></p>\n\n<p><textarea placeholder=\"This is TextArea\"></textarea></p>\n\n<p><a href=\"#\" class=\"button tiny\">Tiny Button</a> <a href=\"#\" class=\"button small\">Small Button</a> <a href=\"#\" class=\"button\">Default Button</a> <a href=\"#\" class=\"button large\">Large Button</a></p>\n\n<p><a href=\"#\" class=\"button secondary\">Secondary Button</a> <a href=\"#\" class=\"button success\">Success Button</a> <a href=\"#\" class=\"button alert\">Alert Button</a></p>\n\n<p><a href=\"#\" class=\"button radius\">Radius Button</a> <a href=\"#\" class=\"button round\">Round Button</a> <a href=\"#\" class=\"button disabled\">Disabled Button</a></p>\n","html":"<p>Typography</p>\n\n<pre><code>                    &lt;h2 id=\"creatingbeautifulcontentwithghostion\"&gt;Creating Beautiful Content with Ghostion&lt;/h2&gt;\n</code></pre>\n\n<p>Powered by Foundation 5, typography in Ghostion theme is meant to make your life easier by providing clean, attractive, simple default styles for all of the most basic typographical elements.</p>\n\n<p>Ghost uses <strong>Markdown</strong> for writing. Essentially, it's a shorthand way to manage your post formatting as you write. Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use shortcuts to style your content. </p>\n\n<p><img src=\"http://ghostdemo.axiantheme.com/ghostion/demo/typography.jpg\" alt=\"Typography\"></p>\n\n<p><br></p>\n\n<h4 id=\"heading\">Heading</h4>\n\n<p>Ghostion includes styles for all of the header elements that are balanced and based on a modular scale.</p>\n\n<h1 id=\"h1thisisaverylargeheader\">h1. This is a very large header.</h1>\n\n<h2 id=\"h2thisisalargeheader\">h2. This is a large header.</h2>\n\n<h3 id=\"h3thisisamediumheader\">h3. This is a medium header.</h3>\n\n<h4 id=\"h4thisisamoderateheader\">h4. This is a moderate header.</h4>\n\n<h5 id=\"h5thisisasmallheader\">h5. This is a small header.</h5>\n\n<h6 id=\"h6thisisatinyheader\">h6. This is a tiny header.</h6>\n\n<p><br></p>\n\n<h4 id=\"paragraph\">Paragraph</h4>\n\n<p>This is a paragraph. Paragraphs are preset with a font size, line height and spacing to match the overall vertical rhythm.</p>\n\n<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.</p>\n\n<p><br></p>\n\n<h4 id=\"strongandemphasize\">Strong and Emphasize</h4>\n\n<p>Wrap <code>**</code> around type to make it <strong>bold</strong>! You can also use <code>*</code> to <em>italicize</em> your words.</p>\n\n<p><code>**strong**</code> or <code>__strong__</code> <strong>( Cmd + B or Ctrl + B (Windows) )</strong></p>\n\n<p><code>*emphasize*</code> or <code>_emphasize_</code> <strong>( Cmd + I or Ctrl + I (Windows) )</strong></p>\n\n<p><strong>Sometimes I want a lot of text to be bold. Like, seriously, a <em>LOT</em> of text</strong></p>\n\n<p><br></p>\n\n<h4 id=\"lists\">Lists</h4>\n\n<p>Lists are helpful for, well, lists of things.</p>\n\n<p><strong>Ordered lists</strong> are created using \"1.\" + Space:</p>\n\n<ol>  \n<li>Ordered list item  </li>  \n<li>Ordered list item  </li>  \n<li>Ordered list item</li>  \n</ol>\n\n<p><strong>Unordered list</strong> are created using \"*\" + Space:</p>\n\n<ul>  \n<li>Unordered list item</li>  \n<li>Unordered list item</li>  \n<li>Unordered list item </li>  \n</ul>\n\n<p>Or using \"-\" + Space:</p>\n\n<ul>  \n<li>Unordered list item</li>  \n<li>Unordered list item</li>  \n<li>Unordered list item</li>  \n</ul>\n\n<p><br></p>\n\n<h4 id=\"blockquotes\">Blockquotes</h4>\n\n<blockquote>  \n  <p>Sometimes other people say smart things, and you may want to mention that through a blockquote callout. We've got you covered. Right angle brackets <strong>&gt;</strong> are used for block quotes.</p>\n</blockquote>\n\n<p><br></p>\n\n<h4 id=\"linksandemail\">Links and Email</h4>\n\n<p>Want to link to a source? No problem. If you paste in url, like <a href=\"http://ghost.org\">http://ghost.org</a> - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! </p>\n\n<p>Simple inline link <code>http://www.axiantheme.com</code> <a href=\"http://www.axiantheme.com\">http://www.axiantheme.com</a>, another inline link <code>[Ghostion](http://ghostion.ghostdemo.axiantheme.com)</code> <a href=\"http://ghostion.ghostdemo.axiantheme.com\">Ghostion</a>, and one more inline link with title <code>[DigitalOcean](https://www.digitalocean.com/?refcode=3bb89a8961ff \"The Best Hosting for Ghost\")</code> <a href=\"https://www.digitalocean.com/?refcode=3bb89a8961ff\" title=\"The Best Hosting for Ghost\">DigitalOcean</a>. </p>\n\n<p>An email <a href=\"mailto:example@example.com\">example@example.com</a> link.</p>\n\n<p><br></p>\n\n<h4 id=\"strikethrough\">Strikethrough</h4>\n\n<p>Wrap with 2 tilde characters <strong><del>Strikethrough</del></strong> :</p>\n\n<p><del>Strikethrough</del></p>\n\n<p><br></p>\n\n<h4 id=\"images\">Images</h4>\n\n<p>Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like the following to make it show up.</p>\n\n<p><code>![Ghostion](http://ghostdemo.axiantheme.com/ghostion/demo/sample_image.jpg)</code></p>\n\n<p><img src=\"http://ghostdemo.axiantheme.com/ghostion/demo/sample_image.jpg\" alt=\"Ghostion\"></p>\n\n<p>An inline image <img src=\"http://ghostdemo.axiantheme.com/ghostion/demo/ghostion_icon.jpg\" alt=\"Ghostion Icon\" title=\"Ghostion Icon\">, title is optional. with the following code:</p>\n\n<p><code>![Ghostion Icon](http://ghostdemo.axiantheme.com/ghostion/demo/ghostion_icon.jpg \"Ghostion Icon\")</code></p>\n\n<p>A <img src=\"http://ghostdemo.axiantheme.com/ghostion/demo/ghostion_icon.jpg\" alt=\"Ghostion Icon\" title=\"Ghostion Icon\"> reference style image, with this code <code>![Ghostion Icon][1]</code>.</p>\n\n<p><code>[1]: http://ghostdemo.axiantheme.com/ghostion/demo/ghostion_icon.jpg \"Ghostion Icon\"</code>  \n<br> <br>  \n<br></p>\n\n<h4 id=\"codes\">Codes</h4>\n\n<p>Got a streak of geek? We've got you covered there, too. You can write inline <code>&lt;code&gt;</code> blocks really easily with double backticks. </p>\n\n<p>Want to show off something more comprehensive? 4 spaces of indentation or start with a line containing 3 or more backticks, and ends with the first line with the same number of backticks</p>\n\n<pre><code class=\" hljs css\"><span class=\"hljs-class\">.awesome-ghostion</span> <span class=\"hljs-rules\">{\n    <span class=\"hljs-rule\"><span class=\"hljs-attribute\">display</span>:<span class=\"hljs-value\"> block</span></span>;\n    <span class=\"hljs-rule\"><span class=\"hljs-attribute\">width</span>:<span class=\"hljs-value\"> <span class=\"hljs-number\">100</span>%</span></span>;\n<span class=\"hljs-rule\">}</span></span>\n</code></pre>\n\n<p>Ghostion supports syntax highlighting, powered by <a href=\"http://highlightjs.org/\">Highlight.js</a></p>\n\n<pre><code class=\" hljs ruby\">h1, h2, h3, h4, h5, h6 {  \n    <span class=\"hljs-symbol\">color:</span> darken(<span class=\"hljs-variable\">$base_text_color</span>, <span class=\"hljs-number\">10</span>%);\n    font-<span class=\"hljs-symbol\">family:</span> <span class=\"hljs-variable\">$base_font_family</span>;\n    font-<span class=\"hljs-symbol\">weight:</span> bold;\n}\na {  \n    <span class=\"hljs-symbol\">color:</span> <span class=\"hljs-variable\">$primary_color</span>;\n    <span class=\"hljs-variable\">@include</span> transition(color <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">2</span>s ease-<span class=\"hljs-keyword\">in</span>);\n    &amp;<span class=\"hljs-symbol\">:hover</span>, &amp;<span class=\"hljs-symbol\">:focus</span> {\n        <span class=\"hljs-symbol\">color:</span> shade(<span class=\"hljs-variable\">$primary_color</span>, <span class=\"hljs-number\">15</span>%);\n    }\n}\n</code></pre>\n\n<p><br></p>\n\n<h4 id=\"advancedusage\">Advanced Usage</h4>\n\n<p>There's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.</p>\n\n<p><span class=\"label\">Regular Label</span> <span class=\"secondary radius label\">Secondary Radius Label</span> <span class=\"alert round label\">Alert Round Label</span> <span class=\"success label\">Success Label</span></p>\n\n<p><input type=\"text\" placeholder=\"This is Input\"></p>\n\n<p><textarea placeholder=\"This is TextArea\"></textarea></p>\n\n<p><a href=\"#\" class=\"button tiny\">Tiny Button</a> <a href=\"#\" class=\"button small\">Small Button</a> <a href=\"#\" class=\"button\">Default Button</a> <a href=\"#\" class=\"button large\">Large Button</a></p>\n\n<p><a href=\"#\" class=\"button secondary\">Secondary Button</a> <a href=\"#\" class=\"button success\">Success Button</a> <a href=\"#\" class=\"button alert\">Alert Button</a></p>\n\n<p><a href=\"#\" class=\"button radius\">Radius Button</a> <a href=\"#\" class=\"button round\">Round Button</a> <a href=\"#\" class=\"button disabled\">Disabled Button</a></p>","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1398893705786,"created_by":1,"updated_at":1398893855306,"updated_by":1,"published_at":1398893709747,"published_by":1}],"users":[{"id":1,"uuid":"00a5a11a-6bd1-4b79-bc9d-3c1dc15def1e","name":"Joost van der Laan","slug":"joost-van-der-laan","password":"$2a$10$aShTe0TaMfp1vpSA9S72POUq9RBSbbp0V1m51MZTzMnzyNu7Ma5qu","email":"joostvanderlaan@gmail.com","image":"//www.gravatar.com/avatar/a48c865a20f3b13d6d73ec9708f6d598?d=404","cover":null,"bio":"","website":"","location":"Amsterdam","accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":null,"created_at":1398887534237,"created_by":1,"updated_at":1439273321530,"updated_by":1}],"roles":[{"id":1,"uuid":"99967a50-2671-43b2-b7ef-5eca71ce190a","name":"Administrator","description":"Administrators","created_at":1390861183546,"created_by":1,"updated_at":1390861183546,"updated_by":1},{"id":2,"uuid":"ecc10eaa-166b-4e0a-b179-9ff1e883904c","name":"Editor","description":"Editors","created_at":1390861183551,"created_by":1,"updated_at":1390861183551,"updated_by":1},{"id":3,"uuid":"f0927e58-1288-4e1a-8f62-0d431131ab25","name":"Author","description":"Authors","created_at":1390861183557,"created_by":1,"updated_at":1390861183557,"updated_by":1}],"roles_users":[{"id":1,"role_id":1,"user_id":1}],"permissions":[{"id":1,"uuid":"02ac654b-26df-4c5f-adee-9925f4dcd892","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1390861183561,"created_by":1,"updated_at":1390861183561,"updated_by":1},{"id":2,"uuid":"1fd8c6b2-3255-422c-99d7-2229431f4865","name":"Remove posts","object_type":"post","action_type":"remove","object_id":null,"created_at":1390861183566,"created_by":1,"updated_at":1390861183566,"updated_by":1},{"id":3,"uuid":"d20de67e-3685-4972-95c0-4c45c7bb46e1","name":"Create posts","object_type":"post","action_type":"create","object_id":null,"created_at":1390861183571,"created_by":1,"updated_at":1390861183571,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3}],"settings":[{"id":1,"uuid":"5a9b7de4-9f64-4267-a0fa-ddd6fba25bc2","key":"databaseVersion","value":"002","type":"core","created_at":1390861183585,"created_by":1,"updated_at":1390861183585,"updated_by":1},{"id":2,"uuid":"325821f3-bce4-4e21-a161-144cf6a5dfb6","key":"dbHash","value":"b5440550-3828-468b-a794-02a0daca08d4","type":"core","created_at":1390861183585,"created_by":1,"updated_at":1390861183701,"updated_by":1},{"id":3,"uuid":"a9521e48-3059-470f-844b-5508e86dd7e5","key":"nextUpdateCheck","value":"1439359722","type":"core","created_at":1390861183586,"created_by":1,"updated_at":1439273322310,"updated_by":1},{"id":4,"uuid":"23ea4088-aa04-467e-a004-ea7caf266e92","key":"displayUpdateNotification","value":"0.5.0","type":"core","created_at":1390861183586,"created_by":1,"updated_at":1439273322315,"updated_by":1},{"id":5,"uuid":"78ec3097-27a4-4521-828c-c58b068dc0ae","key":"title","value":"Joost van der Laan","type":"blog","created_at":1390861183586,"created_by":1,"updated_at":1398977152353,"updated_by":1},{"id":6,"uuid":"539f7b3f-1dd7-45f0-b1eb-bfd12171d0cb","key":"description","value":"Web Performance & SEO","type":"blog","created_at":1390861183586,"created_by":1,"updated_at":1398977152354,"updated_by":1},{"id":7,"uuid":"eeeb1fa7-fb5e-41cd-8e7b-65278e999320","key":"email","value":"joostvanderlaan@gmail.com","type":"blog","created_at":1390861183587,"created_by":1,"updated_at":1398977152354,"updated_by":1},{"id":8,"uuid":"66e221e3-fb52-44f2-8c9c-b0eff47c01d9","key":"logo","value":"","type":"blog","created_at":1390861183588,"created_by":1,"updated_at":1398977152355,"updated_by":1},{"id":9,"uuid":"6e009481-4035-417f-89dd-02f10d5e9da1","key":"cover","value":"","type":"blog","created_at":1390861183590,"created_by":1,"updated_at":1398977152355,"updated_by":1},{"id":10,"uuid":"328b7c0c-a37b-45c6-8710-cca1b2fd9438","key":"defaultLang","value":"en_US","type":"blog","created_at":1390861183590,"created_by":1,"updated_at":1398977152356,"updated_by":1},{"id":11,"uuid":"ca4a7ea7-2442-44a0-b6b8-41c653b011c9","key":"postsPerPage","value":"6","type":"blog","created_at":1390861183590,"created_by":1,"updated_at":1398977152357,"updated_by":1},{"id":12,"uuid":"64ba9068-2f65-422d-8b11-4925bb94ee5c","key":"forceI18n","value":"true","type":"blog","created_at":1390861183591,"created_by":1,"updated_at":1398977152362,"updated_by":1},{"id":13,"uuid":"df0b5cf0-efad-4552-a879-a21796baf508","key":"permalinks","value":"/:slug/","type":"blog","created_at":1390861183591,"created_by":1,"updated_at":1398977152364,"updated_by":1},{"id":14,"uuid":"2221afd5-bd2d-4276-ad9c-d93ae28a8290","key":"activeTheme","value":"casper","type":"theme","created_at":1390861183592,"created_by":1,"updated_at":1398977152364,"updated_by":1},{"id":15,"uuid":"619ebdc7-2d33-4bf9-9b6d-47f8b855c7f0","key":"activePlugins","value":"[]","type":"plugin","created_at":1390861183592,"created_by":1,"updated_at":1390861183592,"updated_by":1},{"id":16,"uuid":"d6f9172c-476e-4acc-bfdc-adbcb17a17f1","key":"installedPlugins","value":"[]","type":"plugin","created_at":1390861183592,"created_by":1,"updated_at":1390861628153,"updated_by":1},{"id":17,"uuid":"156d3aca-55a5-465b-ac31-88230a92f2be","key":"activeApps","value":"[]","type":"app","created_at":1398887509327,"created_by":1,"updated_at":1398977152365,"updated_by":1},{"id":18,"uuid":"04c0c0fa-d465-47e2-b306-e54d7635a1ec","key":"installedApps","value":"[]","type":"app","created_at":1398887509328,"created_by":1,"updated_at":1439273111325,"updated_by":1}],"tags":[{"id":1,"uuid":"7b64501f-9874-4011-8b7f-de97404bb005","name":"Getting Started","slug":"getting-started","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1390861183540,"created_by":1,"updated_at":1390861183540,"updated_by":1}],"posts_tags":[]}}