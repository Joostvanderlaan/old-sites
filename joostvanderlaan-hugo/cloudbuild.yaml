# In this directory, run the following command to build this builder.
# $ gcloud builds submit . --config=cloudbuild.yaml

timeout: 300s

steps:
  - name: node:lts
    entrypoint: npm
    args: ['install']
  - name: "eu.gcr.io/joostl/firebase-hugo:latest"
    args: ["firebase", "deploy", "--project", "joostvanderlaan-nl"]
    secretEnv: ["FIREBASE_TOKEN"]
secrets:
  - kmsKeyName: projects/joostl/locations/global/keyRings/keyring_development/cryptoKeys/ci-deploy-firebase-token
    secretEnv:
      FIREBASE_TOKEN: "CiQAf088XLobo97t3QN92Gtv37PR7uolSwgT+Asass3eWqS48yASVQB4TuIqdxJ76IzbEHVxHfHv
vBimnvJNch9JM5wNBYVESwocJGuBvEFKNNIm86ci/zlGtdg8i5kN+H6qVfSb7ok479atZh9oESw7
QDrhy8U8D5cUPy8="



# # Decrypt the file containing the key
# steps:
#   - name: "gcr.io/cloud-builders/gcloud"
#     args:
#       - kms
#       - decrypt
#       - --ciphertext-file=id_rsa.enc
#       - --plaintext-file=/root/.ssh/id_rsa
#       - --location=global
#       - --keyring=my-keyring
#       - --key=github-key
#     volumes:
#       - name: "ssh"
#         path: /root/.ssh
#     id: "decrypt-key"

#   # Set up git with key and domain.
#   - name: "gcr.io/cloud-builders/git"
#     entrypoint: "bash"
#     args:
#       - "-c"
#       - |
#         chmod 600 /root/.ssh/id_rsa
#         cat <<EOF >/root/.ssh/config
#         Hostname github.com
#         IdentityFile /root/.ssh/id_rsa
#         EOF
#         mv known_hosts /root/.ssh/known_hosts
#     volumes:
#       - name: "ssh"
#         path: /root/.ssh
#     id: "use-key-github"

#   # Update submodules
#   - name: "gcr.io/cloud-builders/git"
#     entrypoint: "bash"
#     args:
#       - "-c"
#       - |
#         git submodule init
#         git submodule update
#     #   - clone
#     #   - git@github.com:fashionunited/[REPOSITORY]
#     volumes:
#       - name: "ssh"
#         path: /root/.ssh
#     id: "submodule-update"

#   # - name: 'gcr.io/cloud-builders/gcloud'
#   #     entrypoint: 'bash'
#   #     args:
#   #     - '-c'
#   #     - |
#   #         git submodule update --init --recursive

#   # Check project GCR for current available images.
#   - name: "gcr.io/cloud-builders/gcloud"
#     entrypoint: "bash"
#     args:
#       - "-c"
#       - |
#         gcloud container images list-tags eu.gcr.io/$PROJECT_ID/hugo --format=json > gcrimagelist.json
#         gcloud container images list-tags eu.gcr.io/$PROJECT_ID/frbtools --format=json > gcrfrbimglist.json
#     id: "check-images"

#   #   # Run 'update.py' to check current Hugo version and update 'Dockerfile.hugo-xtnd' accordingly.
#   #   - name: 'python:3.7'
#   #     entrypoint: 'bash'
#   #     args:
#   #     - '-c'
#   #     - |
#   #       python --version
#   #       git config --global user.email "[YOUR_EMAIL]"
#   #       git config --global user.name "[YOUR_NAME]"
#   #       pip3 install requests gitpython
#   #       python ./update.py
#   #     id: 'update'

#   #   # Update the actual Google Cloud Sources repo
#   #   - name: 'gcr.io/cloud-builders/git'
#   #     args:
#   #     - 'push'
#   #     - '-f'
#   #     - 'https://source.developers.google.com/p/$PROJECT_ID/r/$REPO_NAME'
#   #     - 'master'
#   #     - '--follow-tags'
#   #     id: 'sources-update'

#   # Build hugo extended most current version and tag accordingly
#   - name: "gcr.io/cloud-builders/docker"
#     entrypoint: "bash"
#     args:
#       - "./imgbuilder.bash"
#     env:
#       - "PROJECT=$PROJECT_ID"
#       - "VRSNFILE=buildhugo.txt"
#       - "IMGNAME=hugo"
#       - "DCRFILE=Dockerfile-hugo-xtnd"
#       - 'SEARCHSTR="ENV HUGO_VERSION"'

#     # Test if an image build with current hugo extended works
#   - name: "eu.gcr.io/$PROJECT_ID/hugo"
#     args: ["--help"]
#     id: "test"

#     # Build site
#     # All available Hugo versions are listed here: gcr.io/$PROJECT_ID/hugo (private)
#   - name: "eu.gcr.io/$PROJECT_ID/hugo"
#     id: "site-builder"

#     # Check if the site is built- name: busybox
#     args: ["cat", "public/index.xml"]

#     # Build Firebase tools most current version and tag accordingly
#   - name: "gcr.io/cloud-builders/docker"
#     entrypoint: "bash"
#     args:
#       - "./imgbuilder.bash"
#     env:
#       - "PROJECT=$PROJECT_ID"
#       - "VRSNFILE=buildfrtls.txt"
#       - "IMGNAME=frbtools"
#       - "DCRFILE=Dockerfile-firebase"
#       - 'SEARCHSTR="ENV FRBTOOLS_VERSION"'
#     id: "frbtools-image"
#     # waitFor: ['sources-update']

#     # Test Firebase tools
#   - name: "gcr.io/$PROJECT_ID/frbtools"
#     args:
#       - "list"
#     secretEnv: ["FIREBASE_TOKEN"]
#     waitFor: ["frbtools-image", "test"]

#     # Deploy to Firebase hosting
#   - name: "gcr.io/$PROJECT_ID/frbtools"
#     args:
#       - "--project"
#       - "landing-pages-hugo"
#       - "--non-interactive"
#       - "deploy"
#       - "--only"
#       - "hosting"
#       - "--message"
#       - "Build $BUILD_ID, repo $REPO_NAME, sha1 $COMMIT_SHA, ref $BRANCH_NAME"
#     secretEnv: ["FIREBASE_TOKEN"]
# secrets:
#   - kmsKeyName: projects/joostl/locations/global/keyRings/keyring_development/cryptoKeys/ci-deploy-firebase-token
#     secretEnv:
#       FIREBASE_TOKEN: "CiQAGn+8XE/2gtF39BEvKfHgAnEuDLA66DSWI17Lhze0XL5NyVYSIQD82SaC4PdDACNdjIpfCQs+
# q8ixqWX6gYNJVJjwoCfFwQ=="
